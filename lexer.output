Terminals unused in grammar

   INDEX
   THEN
   LEFT_BRACKET
   RIGHT_BRACKET
   LEFT_CURR_BRACKET
   RIGHT_CURR_BRACKET
   READ
   WRITE
   INVALIDVAR


Rules useless in parser due to conflicts

   13 statements: statements statements


State 5 conflicts: 6 shift/reduce
State 17 conflicts: 7 shift/reduce
State 34 conflicts: 6 shift/reduce
State 46 conflicts: 6 shift/reduce, 8 reduce/reduce
State 59 conflicts: 6 shift/reduce
State 67 conflicts: 7 shift/reduce, 1 reduce/reduce
State 82 conflicts: 7 shift/reduce
State 87 conflicts: 6 shift/reduce
State 94 conflicts: 7 shift/reduce


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | function void

    3 void: %empty
    4     | function void

    5 function: FUNCTION functiondec statements END

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN

    8 elses: %empty
    9      | ELSE statements END

   10 statements: %empty
   11           | IF conditional statements elses END
   12           | WHILE conditional DO statements END
   13           | statements statements
   14           | statement

   15 statement: INT VARIABLE
   16          | VARIABLE EQUAL exp
   17          | VARIABLE EQUAL STRINGLITERAL
   18          | INT VARIABLE EQUAL exp
   19          | STRING VARIABLE EQUAL STRINGLITERAL
   20          | RETURN retval
   21          | functioncall
   22          | VARIABLE EQUAL functioncall
   23          | INT VARIABLE EQUAL functioncall

   24 conditional: exp condition exp
   25            | exp condition boolean
   26            | STRINGLITERAL condition STRINGLITERAL

   27 boolean: TRUE
   28        | FALSE

   29 condition: LESSEROREQUAL
   30          | GREATEROREQUAL
   31          | LESSTHAN
   32          | GREATERTHAN
   33          | EQUIVALENT
   34          | NOTEQUIVALENT

   35 retval: statement
   36       | exp
   37       | conditional
   38       | boolean

   39 type: %empty
   40     | INT
   41     | STRING

   42 input: exp

   43 inputargs: %empty
   44          | input inputargs2

   45 inputargs2: %empty
   46           | COMMA input inputargs2

   47 declarationargs: %empty
   48                | type VARIABLE declarationargs2

   49 declarationargs2: %empty
   50                 | COMMA type VARIABLE declarationargs2

   51 exp: exp addop term
   52    | term

   53 addop: ADD
   54      | SUBTRACT

   55 term: term mulop factor
   56     | factor

   57 mulop: MULTIPLY
   58      | DIVISION

   59 factor: LEFT_PREN exp RIGHT_PREN
   60       | DIGIT
   61       | VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGIT (258) 60
INT (259) 15 18 23 40
INDEX (260)
THEN (261)
STRING (262) 19 41
EQUAL (263) 16 17 18 19 22 23
NOTEQUIVALENT (264) 34
TRUE (265) 27
FALSE (266) 28
MULTIPLY (267) 57
ADD (268) 53
SUBTRACT (269) 54
DIVISION (270) 58
LESSEROREQUAL (271) 29
EQUIVALENT (272) 33
GREATEROREQUAL (273) 30
LESSTHAN (274) 31
GREATERTHAN (275) 32
WHILE (276) 12
DO (277) 12
IF (278) 11
ELSE (279) 9
FUNCTION (280) 5
LEFT_PREN (281) 6 7 59
RIGHT_PREN (282) 6 7 59
LEFT_BRACKET (283)
RIGHT_BRACKET (284)
LEFT_CURR_BRACKET (285)
RIGHT_CURR_BRACKET (286)
RETURN (287) 20
END (288) 5 9 11 12
COMMA (289) 46 50
READ (290)
WRITE (291)
STRINGLITERAL (292) 17 19 26
INVALIDVAR (293)
VARIABLE (294) 6 7 15 16 17 18 19 22 23 48 50 61


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
start (41)
    on left: 1 2, on right: 0
void (42)
    on left: 3 4, on right: 2 4
function (43)
    on left: 5, on right: 2 4
functiondec (44)
    on left: 6, on right: 5
functioncall (45)
    on left: 7, on right: 21 22 23
elses (46)
    on left: 8 9, on right: 11
statements (47)
    on left: 10 11 12 13 14, on right: 5 9 11 12 13
statement (48)
    on left: 15 16 17 18 19 20 21 22 23, on right: 14 35
conditional (49)
    on left: 24 25 26, on right: 11 12 37
boolean (50)
    on left: 27 28, on right: 25 38
condition (51)
    on left: 29 30 31 32 33 34, on right: 24 25 26
retval (52)
    on left: 35 36 37 38, on right: 20
type (53)
    on left: 39 40 41, on right: 48 50
input (54)
    on left: 42, on right: 44 46
inputargs (55)
    on left: 43 44, on right: 7
inputargs2 (56)
    on left: 45 46, on right: 44 46
declarationargs (57)
    on left: 47 48, on right: 6
declarationargs2 (58)
    on left: 49 50, on right: 48 50
exp (59)
    on left: 51 52, on right: 16 18 24 25 36 42 51 59
addop (60)
    on left: 53 54, on right: 51
term (61)
    on left: 55 56, on right: 51 52 55
mulop (62)
    on left: 57 58, on right: 55
factor (63)
    on left: 59 60 61, on right: 55 56


State 0

    0 $accept: . start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (start)

    start     go to state 2
    function  go to state 3


State 1

    5 function: FUNCTION . functiondec statements END

    VARIABLE  shift, and go to state 4

    functiondec  go to state 5


State 2

    0 $accept: start . $end

    $end  shift, and go to state 6


State 3

    2 start: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 7
    function  go to state 8


State 4

    6 functiondec: VARIABLE . LEFT_PREN declarationargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 9


State 5

    5 function: FUNCTION functiondec . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]
    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 17
    statement     go to state 18


State 6

    0 $accept: start $end .

    $default  accept


State 7

    2 start: function void .

    $default  reduce using rule 2 (start)


State 8

    4 void: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 19
    function  go to state 8


State 9

    6 functiondec: VARIABLE LEFT_PREN . declarationargs RIGHT_PREN

    INT     shift, and go to state 20
    STRING  shift, and go to state 21

    RIGHT_PREN  reduce using rule 47 (declarationargs)
    $default    reduce using rule 39 (type)

    type             go to state 22
    declarationargs  go to state 23


State 10

   15 statement: INT . VARIABLE
   18          | INT . VARIABLE EQUAL exp
   23          | INT . VARIABLE EQUAL functioncall

    VARIABLE  shift, and go to state 24


State 11

   19 statement: STRING . VARIABLE EQUAL STRINGLITERAL

    VARIABLE  shift, and go to state 25


State 12

   12 statements: WHILE . conditional DO statements END

    DIGIT          shift, and go to state 26
    LEFT_PREN      shift, and go to state 27
    STRINGLITERAL  shift, and go to state 28
    VARIABLE       shift, and go to state 29

    conditional  go to state 30
    exp          go to state 31
    term         go to state 32
    factor       go to state 33


State 13

   11 statements: IF . conditional statements elses END

    DIGIT          shift, and go to state 26
    LEFT_PREN      shift, and go to state 27
    STRINGLITERAL  shift, and go to state 28
    VARIABLE       shift, and go to state 29

    conditional  go to state 34
    exp          go to state 31
    term         go to state 32
    factor       go to state 33


State 14

   20 statement: RETURN . retval

    DIGIT          shift, and go to state 26
    INT            shift, and go to state 10
    STRING         shift, and go to state 11
    TRUE           shift, and go to state 35
    FALSE          shift, and go to state 36
    LEFT_PREN      shift, and go to state 27
    RETURN         shift, and go to state 14
    STRINGLITERAL  shift, and go to state 28
    VARIABLE       shift, and go to state 37

    functioncall  go to state 16
    statement     go to state 38
    conditional   go to state 39
    boolean       go to state 40
    retval        go to state 41
    exp           go to state 42
    term          go to state 32
    factor        go to state 33


State 15

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   16 statement: VARIABLE . EQUAL exp
   17          | VARIABLE . EQUAL STRINGLITERAL
   22          | VARIABLE . EQUAL functioncall

    EQUAL      shift, and go to state 43
    LEFT_PREN  shift, and go to state 44


State 16

   21 statement: functioncall .

    $default  reduce using rule 21 (statement)


State 17

    5 function: FUNCTION functiondec statements . END
   13 statements: statements . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    END       shift, and go to state 45
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    END       [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]

    functioncall  go to state 16
    statements    go to state 46
    statement     go to state 18


State 18

   14 statements: statement .

    $default  reduce using rule 14 (statements)


State 19

    4 void: function void .

    $default  reduce using rule 4 (void)


State 20

   40 type: INT .

    $default  reduce using rule 40 (type)


State 21

   41 type: STRING .

    $default  reduce using rule 41 (type)


State 22

   48 declarationargs: type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 47


State 23

    6 functiondec: VARIABLE LEFT_PREN declarationargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 48


State 24

   15 statement: INT VARIABLE .
   18          | INT VARIABLE . EQUAL exp
   23          | INT VARIABLE . EQUAL functioncall

    EQUAL  shift, and go to state 49

    $default  reduce using rule 15 (statement)


State 25

   19 statement: STRING VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 50


State 26

   60 factor: DIGIT .

    $default  reduce using rule 60 (factor)


State 27

   59 factor: LEFT_PREN . exp RIGHT_PREN

    DIGIT      shift, and go to state 26
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 29

    exp     go to state 51
    term    go to state 32
    factor  go to state 33


State 28

   26 conditional: STRINGLITERAL . condition STRINGLITERAL

    NOTEQUIVALENT   shift, and go to state 52
    LESSEROREQUAL   shift, and go to state 53
    EQUIVALENT      shift, and go to state 54
    GREATEROREQUAL  shift, and go to state 55
    LESSTHAN        shift, and go to state 56
    GREATERTHAN     shift, and go to state 57

    condition  go to state 58


State 29

   61 factor: VARIABLE .

    $default  reduce using rule 61 (factor)


State 30

   12 statements: WHILE conditional . DO statements END

    DO  shift, and go to state 59


State 31

   24 conditional: exp . condition exp
   25            | exp . condition boolean
   51 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 52
    ADD             shift, and go to state 60
    SUBTRACT        shift, and go to state 61
    LESSEROREQUAL   shift, and go to state 53
    EQUIVALENT      shift, and go to state 54
    GREATEROREQUAL  shift, and go to state 55
    LESSTHAN        shift, and go to state 56
    GREATERTHAN     shift, and go to state 57

    condition  go to state 62
    addop      go to state 63


State 32

   52 exp: term .
   55 term: term . mulop factor

    MULTIPLY  shift, and go to state 64
    DIVISION  shift, and go to state 65

    $default  reduce using rule 52 (exp)

    mulop  go to state 66


State 33

   56 term: factor .

    $default  reduce using rule 56 (term)


State 34

   11 statements: IF conditional . statements elses END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]
    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 67
    statement     go to state 18


State 35

   27 boolean: TRUE .

    $default  reduce using rule 27 (boolean)


State 36

   28 boolean: FALSE .

    $default  reduce using rule 28 (boolean)


State 37

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   16 statement: VARIABLE . EQUAL exp
   17          | VARIABLE . EQUAL STRINGLITERAL
   22          | VARIABLE . EQUAL functioncall
   61 factor: VARIABLE .

    EQUAL      shift, and go to state 43
    LEFT_PREN  shift, and go to state 44

    $default  reduce using rule 61 (factor)


State 38

   35 retval: statement .

    $default  reduce using rule 35 (retval)


State 39

   37 retval: conditional .

    $default  reduce using rule 37 (retval)


State 40

   38 retval: boolean .

    $default  reduce using rule 38 (retval)


State 41

   20 statement: RETURN retval .

    $default  reduce using rule 20 (statement)


State 42

   24 conditional: exp . condition exp
   25            | exp . condition boolean
   36 retval: exp .
   51 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 52
    ADD             shift, and go to state 60
    SUBTRACT        shift, and go to state 61
    LESSEROREQUAL   shift, and go to state 53
    EQUIVALENT      shift, and go to state 54
    GREATEROREQUAL  shift, and go to state 55
    LESSTHAN        shift, and go to state 56
    GREATERTHAN     shift, and go to state 57

    $default  reduce using rule 36 (retval)

    condition  go to state 62
    addop      go to state 63


State 43

   16 statement: VARIABLE EQUAL . exp
   17          | VARIABLE EQUAL . STRINGLITERAL
   22          | VARIABLE EQUAL . functioncall

    DIGIT          shift, and go to state 26
    LEFT_PREN      shift, and go to state 27
    STRINGLITERAL  shift, and go to state 68
    VARIABLE       shift, and go to state 69

    functioncall  go to state 70
    exp           go to state 71
    term          go to state 32
    factor        go to state 33


State 44

    7 functioncall: VARIABLE LEFT_PREN . inputargs RIGHT_PREN

    DIGIT      shift, and go to state 26
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 29

    $default  reduce using rule 43 (inputargs)

    input      go to state 72
    inputargs  go to state 73
    exp        go to state 74
    term       go to state 32
    factor     go to state 33


State 45

    5 function: FUNCTION functiondec statements END .

    $default  reduce using rule 5 (function)


State 46

   13 statements: statements . statements
   13           | statements statements .

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    INT       [reduce using rule 13 (statements)]
    STRING    [reduce using rule 10 (statements)]
    STRING    [reduce using rule 13 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 13 (statements)]
    IF        [reduce using rule 10 (statements)]
    IF        [reduce using rule 13 (statements)]
    ELSE      reduce using rule 10 (statements)
    ELSE      [reduce using rule 13 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 13 (statements)]
    END       reduce using rule 10 (statements)
    END       [reduce using rule 13 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 13 (statements)]
    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 46
    statement     go to state 18


State 47

   48 declarationargs: type VARIABLE . declarationargs2

    COMMA  shift, and go to state 75

    $default  reduce using rule 49 (declarationargs2)

    declarationargs2  go to state 76


State 48

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN .

    $default  reduce using rule 6 (functiondec)


State 49

   18 statement: INT VARIABLE EQUAL . exp
   23          | INT VARIABLE EQUAL . functioncall

    DIGIT      shift, and go to state 26
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 69

    functioncall  go to state 77
    exp           go to state 78
    term          go to state 32
    factor        go to state 33


State 50

   19 statement: STRING VARIABLE EQUAL . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 79


State 51

   51 exp: exp . addop term
   59 factor: LEFT_PREN exp . RIGHT_PREN

    ADD         shift, and go to state 60
    SUBTRACT    shift, and go to state 61
    RIGHT_PREN  shift, and go to state 80

    addop  go to state 63


State 52

   34 condition: NOTEQUIVALENT .

    $default  reduce using rule 34 (condition)


State 53

   29 condition: LESSEROREQUAL .

    $default  reduce using rule 29 (condition)


State 54

   33 condition: EQUIVALENT .

    $default  reduce using rule 33 (condition)


State 55

   30 condition: GREATEROREQUAL .

    $default  reduce using rule 30 (condition)


State 56

   31 condition: LESSTHAN .

    $default  reduce using rule 31 (condition)


State 57

   32 condition: GREATERTHAN .

    $default  reduce using rule 32 (condition)


State 58

   26 conditional: STRINGLITERAL condition . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 81


State 59

   12 statements: WHILE conditional DO . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]
    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 82
    statement     go to state 18


State 60

   53 addop: ADD .

    $default  reduce using rule 53 (addop)


State 61

   54 addop: SUBTRACT .

    $default  reduce using rule 54 (addop)


State 62

   24 conditional: exp condition . exp
   25            | exp condition . boolean

    DIGIT      shift, and go to state 26
    TRUE       shift, and go to state 35
    FALSE      shift, and go to state 36
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 29

    boolean  go to state 83
    exp      go to state 84
    term     go to state 32
    factor   go to state 33


State 63

   51 exp: exp addop . term

    DIGIT      shift, and go to state 26
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 29

    term    go to state 85
    factor  go to state 33


State 64

   57 mulop: MULTIPLY .

    $default  reduce using rule 57 (mulop)


State 65

   58 mulop: DIVISION .

    $default  reduce using rule 58 (mulop)


State 66

   55 term: term mulop . factor

    DIGIT      shift, and go to state 26
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 29

    factor  go to state 86


State 67

   11 statements: IF conditional statements . elses END
   13           | statements . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    ELSE      shift, and go to state 87
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    ELSE      [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    END       reduce using rule 8 (elses)
    END       [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]
    $default  reduce using rule 8 (elses)

    functioncall  go to state 16
    elses         go to state 88
    statements    go to state 46
    statement     go to state 18


State 68

   17 statement: VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 17 (statement)


State 69

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   61 factor: VARIABLE .

    LEFT_PREN  shift, and go to state 44

    $default  reduce using rule 61 (factor)


State 70

   22 statement: VARIABLE EQUAL functioncall .

    $default  reduce using rule 22 (statement)


State 71

   16 statement: VARIABLE EQUAL exp .
   51 exp: exp . addop term

    ADD       shift, and go to state 60
    SUBTRACT  shift, and go to state 61

    $default  reduce using rule 16 (statement)

    addop  go to state 63


State 72

   44 inputargs: input . inputargs2

    COMMA  shift, and go to state 89

    $default  reduce using rule 45 (inputargs2)

    inputargs2  go to state 90


State 73

    7 functioncall: VARIABLE LEFT_PREN inputargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 91


State 74

   42 input: exp .
   51 exp: exp . addop term

    ADD       shift, and go to state 60
    SUBTRACT  shift, and go to state 61

    $default  reduce using rule 42 (input)

    addop  go to state 63


State 75

   50 declarationargs2: COMMA . type VARIABLE declarationargs2

    INT     shift, and go to state 20
    STRING  shift, and go to state 21

    $default  reduce using rule 39 (type)

    type  go to state 92


State 76

   48 declarationargs: type VARIABLE declarationargs2 .

    $default  reduce using rule 48 (declarationargs)


State 77

   23 statement: INT VARIABLE EQUAL functioncall .

    $default  reduce using rule 23 (statement)


State 78

   18 statement: INT VARIABLE EQUAL exp .
   51 exp: exp . addop term

    ADD       shift, and go to state 60
    SUBTRACT  shift, and go to state 61

    $default  reduce using rule 18 (statement)

    addop  go to state 63


State 79

   19 statement: STRING VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 19 (statement)


State 80

   59 factor: LEFT_PREN exp RIGHT_PREN .

    $default  reduce using rule 59 (factor)


State 81

   26 conditional: STRINGLITERAL condition STRINGLITERAL .

    $default  reduce using rule 26 (conditional)


State 82

   12 statements: WHILE conditional DO statements . END
   13           | statements . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    END       shift, and go to state 93
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    END       [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]

    functioncall  go to state 16
    statements    go to state 46
    statement     go to state 18


State 83

   25 conditional: exp condition boolean .

    $default  reduce using rule 25 (conditional)


State 84

   24 conditional: exp condition exp .
   51 exp: exp . addop term

    ADD       shift, and go to state 60
    SUBTRACT  shift, and go to state 61

    $default  reduce using rule 24 (conditional)

    addop  go to state 63


State 85

   51 exp: exp addop term .
   55 term: term . mulop factor

    MULTIPLY  shift, and go to state 64
    DIVISION  shift, and go to state 65

    $default  reduce using rule 51 (exp)

    mulop  go to state 66


State 86

   55 term: term mulop factor .

    $default  reduce using rule 55 (term)


State 87

    9 elses: ELSE . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]
    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 94
    statement     go to state 18


State 88

   11 statements: IF conditional statements elses . END

    END  shift, and go to state 95


State 89

   46 inputargs2: COMMA . input inputargs2

    DIGIT      shift, and go to state 26
    LEFT_PREN  shift, and go to state 27
    VARIABLE   shift, and go to state 29

    input   go to state 96
    exp     go to state 74
    term    go to state 32
    factor  go to state 33


State 90

   44 inputargs: input inputargs2 .

    $default  reduce using rule 44 (inputargs)


State 91

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN .

    $default  reduce using rule 7 (functioncall)


State 92

   50 declarationargs2: COMMA type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 97


State 93

   12 statements: WHILE conditional DO statements END .

    $default  reduce using rule 12 (statements)


State 94

    9 elses: ELSE statements . END
   13 statements: statements . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    END       shift, and go to state 98
    VARIABLE  shift, and go to state 15

    INT       [reduce using rule 10 (statements)]
    STRING    [reduce using rule 10 (statements)]
    WHILE     [reduce using rule 10 (statements)]
    IF        [reduce using rule 10 (statements)]
    RETURN    [reduce using rule 10 (statements)]
    END       [reduce using rule 10 (statements)]
    VARIABLE  [reduce using rule 10 (statements)]

    functioncall  go to state 16
    statements    go to state 46
    statement     go to state 18


State 95

   11 statements: IF conditional statements elses END .

    $default  reduce using rule 11 (statements)


State 96

   46 inputargs2: COMMA input . inputargs2

    COMMA  shift, and go to state 89

    $default  reduce using rule 45 (inputargs2)

    inputargs2  go to state 99


State 97

   50 declarationargs2: COMMA type VARIABLE . declarationargs2

    COMMA  shift, and go to state 75

    $default  reduce using rule 49 (declarationargs2)

    declarationargs2  go to state 100


State 98

    9 elses: ELSE statements END .

    $default  reduce using rule 9 (elses)


State 99

   46 inputargs2: COMMA input inputargs2 .

    $default  reduce using rule 46 (inputargs2)


State 100

   50 declarationargs2: COMMA type VARIABLE declarationargs2 .

    $default  reduce using rule 50 (declarationargs2)
