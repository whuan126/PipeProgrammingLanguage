Terminals unused in grammar

   INDEX
   THEN
   LEFT_BRACKET
   RIGHT_BRACKET
   LEFT_CURR_BRACKET
   RIGHT_CURR_BRACKET
   READ
   WRITE
   INVALIDVAR


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | function void

    3 void: %empty
    4     | function void

    5 function: FUNCTION functiondec statements END

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN

    8 elses: %empty
    9      | ELSE statements END

   10 statements: %empty
   11           | rule s2

   12 s2: %empty
   13   | rule s2

   14 rule: IF conditional statements elses END
   15     | WHILE conditional DO statements END
   16     | statement

   17 statement: INT VARIABLE
   18          | VARIABLE EQUAL exp
   19          | VARIABLE EQUAL STRINGLITERAL
   20          | INT VARIABLE EQUAL exp
   21          | STRING VARIABLE EQUAL STRINGLITERAL
   22          | RETURN retval
   23          | functioncall
   24          | VARIABLE EQUAL functioncall
   25          | INT VARIABLE EQUAL functioncall

   26 conditional: exp condition exp
   27            | exp condition boolean
   28            | STRINGLITERAL condition STRINGLITERAL

   29 boolean: TRUE
   30        | FALSE

   31 condition: LESSEROREQUAL
   32          | GREATEROREQUAL
   33          | LESSTHAN
   34          | GREATERTHAN
   35          | EQUIVALENT
   36          | NOTEQUIVALENT

   37 retval: statement
   38       | exp
   39       | conditional
   40       | boolean

   41 type: %empty
   42     | INT
   43     | STRING

   44 input: exp

   45 inputargs: %empty
   46          | input inputargs2

   47 inputargs2: %empty
   48           | COMMA input inputargs2

   49 declarationargs: %empty
   50                | type VARIABLE declarationargs2

   51 declarationargs2: %empty
   52                 | COMMA type VARIABLE declarationargs2

   53 exp: exp addop term
   54    | term

   55 addop: ADD
   56      | SUBTRACT

   57 term: term mulop factor
   58     | factor

   59 mulop: MULTIPLY
   60      | DIVISION

   61 factor: LEFT_PREN exp RIGHT_PREN
   62       | DIGIT
   63       | VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGIT (258) 62
INT (259) 17 20 25 42
INDEX (260)
THEN (261)
STRING (262) 21 43
EQUAL (263) 18 19 20 21 24 25
NOTEQUIVALENT (264) 36
TRUE (265) 29
FALSE (266) 30
MULTIPLY (267) 59
ADD (268) 55
SUBTRACT (269) 56
DIVISION (270) 60
LESSEROREQUAL (271) 31
EQUIVALENT (272) 35
GREATEROREQUAL (273) 32
LESSTHAN (274) 33
GREATERTHAN (275) 34
WHILE (276) 15
DO (277) 15
IF (278) 14
ELSE (279) 9
FUNCTION (280) 5
LEFT_PREN (281) 6 7 61
RIGHT_PREN (282) 6 7 61
LEFT_BRACKET (283)
RIGHT_BRACKET (284)
LEFT_CURR_BRACKET (285)
RIGHT_CURR_BRACKET (286)
RETURN (287) 22
END (288) 5 9 14 15
COMMA (289) 48 52
READ (290)
WRITE (291)
STRINGLITERAL (292) 19 21 28
INVALIDVAR (293)
VARIABLE (294) 6 7 17 18 19 20 21 24 25 50 52 63


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
start (41)
    on left: 1 2, on right: 0
void (42)
    on left: 3 4, on right: 2 4
function (43)
    on left: 5, on right: 2 4
functiondec (44)
    on left: 6, on right: 5
functioncall (45)
    on left: 7, on right: 23 24 25
elses (46)
    on left: 8 9, on right: 14
statements (47)
    on left: 10 11, on right: 5 9 14 15
s2 (48)
    on left: 12 13, on right: 11 13
rule (49)
    on left: 14 15 16, on right: 11 13
statement (50)
    on left: 17 18 19 20 21 22 23 24 25, on right: 16 37
conditional (51)
    on left: 26 27 28, on right: 14 15 39
boolean (52)
    on left: 29 30, on right: 27 40
condition (53)
    on left: 31 32 33 34 35 36, on right: 26 27 28
retval (54)
    on left: 37 38 39 40, on right: 22
type (55)
    on left: 41 42 43, on right: 50 52
input (56)
    on left: 44, on right: 46 48
inputargs (57)
    on left: 45 46, on right: 7
inputargs2 (58)
    on left: 47 48, on right: 46 48
declarationargs (59)
    on left: 49 50, on right: 6
declarationargs2 (60)
    on left: 51 52, on right: 50 52
exp (61)
    on left: 53 54, on right: 18 20 26 27 38 44 53 61
addop (62)
    on left: 55 56, on right: 53
term (63)
    on left: 57 58, on right: 53 54 57
mulop (64)
    on left: 59 60, on right: 57
factor (65)
    on left: 61 62 63, on right: 57 58


State 0

    0 $accept: . start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (start)

    start     go to state 2
    function  go to state 3


State 1

    5 function: FUNCTION . functiondec statements END

    VARIABLE  shift, and go to state 4

    functiondec  go to state 5


State 2

    0 $accept: start . $end

    $end  shift, and go to state 6


State 3

    2 start: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 7
    function  go to state 8


State 4

    6 functiondec: VARIABLE . LEFT_PREN declarationargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 9


State 5

    5 function: FUNCTION functiondec . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 17
    rule          go to state 18
    statement     go to state 19


State 6

    0 $accept: start $end .

    $default  accept


State 7

    2 start: function void .

    $default  reduce using rule 2 (start)


State 8

    4 void: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 20
    function  go to state 8


State 9

    6 functiondec: VARIABLE LEFT_PREN . declarationargs RIGHT_PREN

    INT     shift, and go to state 21
    STRING  shift, and go to state 22

    RIGHT_PREN  reduce using rule 49 (declarationargs)
    $default    reduce using rule 41 (type)

    type             go to state 23
    declarationargs  go to state 24


State 10

   17 statement: INT . VARIABLE
   20          | INT . VARIABLE EQUAL exp
   25          | INT . VARIABLE EQUAL functioncall

    VARIABLE  shift, and go to state 25


State 11

   21 statement: STRING . VARIABLE EQUAL STRINGLITERAL

    VARIABLE  shift, and go to state 26


State 12

   15 rule: WHILE . conditional DO statements END

    DIGIT          shift, and go to state 27
    LEFT_PREN      shift, and go to state 28
    STRINGLITERAL  shift, and go to state 29
    VARIABLE       shift, and go to state 30

    conditional  go to state 31
    exp          go to state 32
    term         go to state 33
    factor       go to state 34


State 13

   14 rule: IF . conditional statements elses END

    DIGIT          shift, and go to state 27
    LEFT_PREN      shift, and go to state 28
    STRINGLITERAL  shift, and go to state 29
    VARIABLE       shift, and go to state 30

    conditional  go to state 35
    exp          go to state 32
    term         go to state 33
    factor       go to state 34


State 14

   22 statement: RETURN . retval

    DIGIT          shift, and go to state 27
    INT            shift, and go to state 10
    STRING         shift, and go to state 11
    TRUE           shift, and go to state 36
    FALSE          shift, and go to state 37
    LEFT_PREN      shift, and go to state 28
    RETURN         shift, and go to state 14
    STRINGLITERAL  shift, and go to state 29
    VARIABLE       shift, and go to state 38

    functioncall  go to state 16
    statement     go to state 39
    conditional   go to state 40
    boolean       go to state 41
    retval        go to state 42
    exp           go to state 43
    term          go to state 33
    factor        go to state 34


State 15

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL exp
   19          | VARIABLE . EQUAL STRINGLITERAL
   24          | VARIABLE . EQUAL functioncall

    EQUAL      shift, and go to state 44
    LEFT_PREN  shift, and go to state 45


State 16

   23 statement: functioncall .

    $default  reduce using rule 23 (statement)


State 17

    5 function: FUNCTION functiondec statements . END

    END  shift, and go to state 46


State 18

   11 statements: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 12 (s2)

    functioncall  go to state 16
    s2            go to state 47
    rule          go to state 48
    statement     go to state 19


State 19

   16 rule: statement .

    $default  reduce using rule 16 (rule)


State 20

    4 void: function void .

    $default  reduce using rule 4 (void)


State 21

   42 type: INT .

    $default  reduce using rule 42 (type)


State 22

   43 type: STRING .

    $default  reduce using rule 43 (type)


State 23

   50 declarationargs: type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 49


State 24

    6 functiondec: VARIABLE LEFT_PREN declarationargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 50


State 25

   17 statement: INT VARIABLE .
   20          | INT VARIABLE . EQUAL exp
   25          | INT VARIABLE . EQUAL functioncall

    EQUAL  shift, and go to state 51

    $default  reduce using rule 17 (statement)


State 26

   21 statement: STRING VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 52


State 27

   62 factor: DIGIT .

    $default  reduce using rule 62 (factor)


State 28

   61 factor: LEFT_PREN . exp RIGHT_PREN

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    exp     go to state 53
    term    go to state 33
    factor  go to state 34


State 29

   28 conditional: STRINGLITERAL . condition STRINGLITERAL

    NOTEQUIVALENT   shift, and go to state 54
    LESSEROREQUAL   shift, and go to state 55
    EQUIVALENT      shift, and go to state 56
    GREATEROREQUAL  shift, and go to state 57
    LESSTHAN        shift, and go to state 58
    GREATERTHAN     shift, and go to state 59

    condition  go to state 60


State 30

   63 factor: VARIABLE .

    $default  reduce using rule 63 (factor)


State 31

   15 rule: WHILE conditional . DO statements END

    DO  shift, and go to state 61


State 32

   26 conditional: exp . condition exp
   27            | exp . condition boolean
   53 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 54
    ADD             shift, and go to state 62
    SUBTRACT        shift, and go to state 63
    LESSEROREQUAL   shift, and go to state 55
    EQUIVALENT      shift, and go to state 56
    GREATEROREQUAL  shift, and go to state 57
    LESSTHAN        shift, and go to state 58
    GREATERTHAN     shift, and go to state 59

    condition  go to state 64
    addop      go to state 65


State 33

   54 exp: term .
   57 term: term . mulop factor

    MULTIPLY  shift, and go to state 66
    DIVISION  shift, and go to state 67

    $default  reduce using rule 54 (exp)

    mulop  go to state 68


State 34

   58 term: factor .

    $default  reduce using rule 58 (term)


State 35

   14 rule: IF conditional . statements elses END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 69
    rule          go to state 18
    statement     go to state 19


State 36

   29 boolean: TRUE .

    $default  reduce using rule 29 (boolean)


State 37

   30 boolean: FALSE .

    $default  reduce using rule 30 (boolean)


State 38

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL exp
   19          | VARIABLE . EQUAL STRINGLITERAL
   24          | VARIABLE . EQUAL functioncall
   63 factor: VARIABLE .

    EQUAL      shift, and go to state 44
    LEFT_PREN  shift, and go to state 45

    $default  reduce using rule 63 (factor)


State 39

   37 retval: statement .

    $default  reduce using rule 37 (retval)


State 40

   39 retval: conditional .

    $default  reduce using rule 39 (retval)


State 41

   40 retval: boolean .

    $default  reduce using rule 40 (retval)


State 42

   22 statement: RETURN retval .

    $default  reduce using rule 22 (statement)


State 43

   26 conditional: exp . condition exp
   27            | exp . condition boolean
   38 retval: exp .
   53 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 54
    ADD             shift, and go to state 62
    SUBTRACT        shift, and go to state 63
    LESSEROREQUAL   shift, and go to state 55
    EQUIVALENT      shift, and go to state 56
    GREATEROREQUAL  shift, and go to state 57
    LESSTHAN        shift, and go to state 58
    GREATERTHAN     shift, and go to state 59

    $default  reduce using rule 38 (retval)

    condition  go to state 64
    addop      go to state 65


State 44

   18 statement: VARIABLE EQUAL . exp
   19          | VARIABLE EQUAL . STRINGLITERAL
   24          | VARIABLE EQUAL . functioncall

    DIGIT          shift, and go to state 27
    LEFT_PREN      shift, and go to state 28
    STRINGLITERAL  shift, and go to state 70
    VARIABLE       shift, and go to state 71

    functioncall  go to state 72
    exp           go to state 73
    term          go to state 33
    factor        go to state 34


State 45

    7 functioncall: VARIABLE LEFT_PREN . inputargs RIGHT_PREN

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    $default  reduce using rule 45 (inputargs)

    input      go to state 74
    inputargs  go to state 75
    exp        go to state 76
    term       go to state 33
    factor     go to state 34


State 46

    5 function: FUNCTION functiondec statements END .

    $default  reduce using rule 5 (function)


State 47

   11 statements: rule s2 .

    $default  reduce using rule 11 (statements)


State 48

   13 s2: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 12 (s2)

    functioncall  go to state 16
    s2            go to state 77
    rule          go to state 48
    statement     go to state 19


State 49

   50 declarationargs: type VARIABLE . declarationargs2

    COMMA  shift, and go to state 78

    $default  reduce using rule 51 (declarationargs2)

    declarationargs2  go to state 79


State 50

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN .

    $default  reduce using rule 6 (functiondec)


State 51

   20 statement: INT VARIABLE EQUAL . exp
   25          | INT VARIABLE EQUAL . functioncall

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 71

    functioncall  go to state 80
    exp           go to state 81
    term          go to state 33
    factor        go to state 34


State 52

   21 statement: STRING VARIABLE EQUAL . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 82


State 53

   53 exp: exp . addop term
   61 factor: LEFT_PREN exp . RIGHT_PREN

    ADD         shift, and go to state 62
    SUBTRACT    shift, and go to state 63
    RIGHT_PREN  shift, and go to state 83

    addop  go to state 65


State 54

   36 condition: NOTEQUIVALENT .

    $default  reduce using rule 36 (condition)


State 55

   31 condition: LESSEROREQUAL .

    $default  reduce using rule 31 (condition)


State 56

   35 condition: EQUIVALENT .

    $default  reduce using rule 35 (condition)


State 57

   32 condition: GREATEROREQUAL .

    $default  reduce using rule 32 (condition)


State 58

   33 condition: LESSTHAN .

    $default  reduce using rule 33 (condition)


State 59

   34 condition: GREATERTHAN .

    $default  reduce using rule 34 (condition)


State 60

   28 conditional: STRINGLITERAL condition . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 84


State 61

   15 rule: WHILE conditional DO . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 85
    rule          go to state 18
    statement     go to state 19


State 62

   55 addop: ADD .

    $default  reduce using rule 55 (addop)


State 63

   56 addop: SUBTRACT .

    $default  reduce using rule 56 (addop)


State 64

   26 conditional: exp condition . exp
   27            | exp condition . boolean

    DIGIT      shift, and go to state 27
    TRUE       shift, and go to state 36
    FALSE      shift, and go to state 37
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    boolean  go to state 86
    exp      go to state 87
    term     go to state 33
    factor   go to state 34


State 65

   53 exp: exp addop . term

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    term    go to state 88
    factor  go to state 34


State 66

   59 mulop: MULTIPLY .

    $default  reduce using rule 59 (mulop)


State 67

   60 mulop: DIVISION .

    $default  reduce using rule 60 (mulop)


State 68

   57 term: term mulop . factor

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    factor  go to state 89


State 69

   14 rule: IF conditional statements . elses END

    ELSE  shift, and go to state 90

    $default  reduce using rule 8 (elses)

    elses  go to state 91


State 70

   19 statement: VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 19 (statement)


State 71

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   63 factor: VARIABLE .

    LEFT_PREN  shift, and go to state 45

    $default  reduce using rule 63 (factor)


State 72

   24 statement: VARIABLE EQUAL functioncall .

    $default  reduce using rule 24 (statement)


State 73

   18 statement: VARIABLE EQUAL exp .
   53 exp: exp . addop term

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63

    $default  reduce using rule 18 (statement)

    addop  go to state 65


State 74

   46 inputargs: input . inputargs2

    COMMA  shift, and go to state 92

    $default  reduce using rule 47 (inputargs2)

    inputargs2  go to state 93


State 75

    7 functioncall: VARIABLE LEFT_PREN inputargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 94


State 76

   44 input: exp .
   53 exp: exp . addop term

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63

    $default  reduce using rule 44 (input)

    addop  go to state 65


State 77

   13 s2: rule s2 .

    $default  reduce using rule 13 (s2)


State 78

   52 declarationargs2: COMMA . type VARIABLE declarationargs2

    INT     shift, and go to state 21
    STRING  shift, and go to state 22

    $default  reduce using rule 41 (type)

    type  go to state 95


State 79

   50 declarationargs: type VARIABLE declarationargs2 .

    $default  reduce using rule 50 (declarationargs)


State 80

   25 statement: INT VARIABLE EQUAL functioncall .

    $default  reduce using rule 25 (statement)


State 81

   20 statement: INT VARIABLE EQUAL exp .
   53 exp: exp . addop term

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63

    $default  reduce using rule 20 (statement)

    addop  go to state 65


State 82

   21 statement: STRING VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 21 (statement)


State 83

   61 factor: LEFT_PREN exp RIGHT_PREN .

    $default  reduce using rule 61 (factor)


State 84

   28 conditional: STRINGLITERAL condition STRINGLITERAL .

    $default  reduce using rule 28 (conditional)


State 85

   15 rule: WHILE conditional DO statements . END

    END  shift, and go to state 96


State 86

   27 conditional: exp condition boolean .

    $default  reduce using rule 27 (conditional)


State 87

   26 conditional: exp condition exp .
   53 exp: exp . addop term

    ADD       shift, and go to state 62
    SUBTRACT  shift, and go to state 63

    $default  reduce using rule 26 (conditional)

    addop  go to state 65


State 88

   53 exp: exp addop term .
   57 term: term . mulop factor

    MULTIPLY  shift, and go to state 66
    DIVISION  shift, and go to state 67

    $default  reduce using rule 53 (exp)

    mulop  go to state 68


State 89

   57 term: term mulop factor .

    $default  reduce using rule 57 (term)


State 90

    9 elses: ELSE . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 97
    rule          go to state 18
    statement     go to state 19


State 91

   14 rule: IF conditional statements elses . END

    END  shift, and go to state 98


State 92

   48 inputargs2: COMMA . input inputargs2

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    input   go to state 99
    exp     go to state 76
    term    go to state 33
    factor  go to state 34


State 93

   46 inputargs: input inputargs2 .

    $default  reduce using rule 46 (inputargs)


State 94

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN .

    $default  reduce using rule 7 (functioncall)


State 95

   52 declarationargs2: COMMA type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 100


State 96

   15 rule: WHILE conditional DO statements END .

    $default  reduce using rule 15 (rule)


State 97

    9 elses: ELSE statements . END

    END  shift, and go to state 101


State 98

   14 rule: IF conditional statements elses END .

    $default  reduce using rule 14 (rule)


State 99

   48 inputargs2: COMMA input . inputargs2

    COMMA  shift, and go to state 92

    $default  reduce using rule 47 (inputargs2)

    inputargs2  go to state 102


State 100

   52 declarationargs2: COMMA type VARIABLE . declarationargs2

    COMMA  shift, and go to state 78

    $default  reduce using rule 51 (declarationargs2)

    declarationargs2  go to state 103


State 101

    9 elses: ELSE statements END .

    $default  reduce using rule 9 (elses)


State 102

   48 inputargs2: COMMA input inputargs2 .

    $default  reduce using rule 48 (inputargs2)


State 103

   52 declarationargs2: COMMA type VARIABLE declarationargs2 .

    $default  reduce using rule 52 (declarationargs2)
