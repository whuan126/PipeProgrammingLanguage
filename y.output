Terminals unused in grammar

   INDEX
   THEN
   LEFT_BRACKET
   RIGHT_BRACKET
   LEFT_CURR_BRACKET
   RIGHT_CURR_BRACKET
   READ
   WRITE
   INVALIDVAR


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | function void

    3 void: %empty
    4     | function void

    5 function: FUNCTION functiondec statements END

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN

    8 elses: %empty
    9      | ELSE statements

   10 statements: %empty
   11           | rule s2

   12 s2: %empty
   13   | rule s2

   14 rule: IF conditional statements elses END
   15     | WHILE conditional DO statements END
   16     | statement

   17 statement: INT VARIABLE
   18          | VARIABLE EQUAL exp
   19          | VARIABLE EQUAL STRINGLITERAL
   20          | INT VARIABLE EQUAL exp
   21          | STRING VARIABLE EQUAL STRINGLITERAL
   22          | RETURN retval
   23          | functioncall
   24          | functioncall addop functioncall
   25          | functioncall mulop functioncall
   26          | VARIABLE EQUAL functioncall
   27          | INT VARIABLE EQUAL functioncall

   28 conditional: exp condition exp
   29            | exp condition boolean
   30            | STRINGLITERAL condition STRINGLITERAL

   31 boolean: TRUE
   32        | FALSE

   33 condition: LESSEROREQUAL
   34          | GREATEROREQUAL
   35          | LESSTHAN
   36          | GREATERTHAN
   37          | EQUIVALENT
   38          | NOTEQUIVALENT

   39 retval: statement
   40       | exp
   41       | conditional
   42       | boolean

   43 type: %empty
   44     | INT
   45     | STRING

   46 input: exp

   47 inputargs: %empty
   48          | input inputargs2

   49 inputargs2: %empty
   50           | COMMA input inputargs2

   51 declarationargs: %empty
   52                | type VARIABLE declarationargs2

   53 declarationargs2: %empty
   54                 | COMMA type VARIABLE declarationargs2

   55 exp: exp addop term
   56    | term

   57 addop: ADD
   58      | SUBTRACT

   59 term: term mulop factor
   60     | factor

   61 mulop: MULTIPLY
   62      | DIVISION

   63 factor: LEFT_PREN exp RIGHT_PREN
   64       | DIGIT
   65       | VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGIT (258) 64
INT (259) 17 20 27 44
INDEX (260)
THEN (261)
STRING (262) 21 45
EQUAL (263) 18 19 20 21 26 27
NOTEQUIVALENT (264) 38
TRUE (265) 31
FALSE (266) 32
MULTIPLY (267) 61
ADD (268) 57
SUBTRACT (269) 58
DIVISION (270) 62
LESSEROREQUAL (271) 33
EQUIVALENT (272) 37
GREATEROREQUAL (273) 34
LESSTHAN (274) 35
GREATERTHAN (275) 36
WHILE (276) 15
DO (277) 15
IF (278) 14
ELSE (279) 9
FUNCTION (280) 5
LEFT_PREN (281) 6 7 63
RIGHT_PREN (282) 6 7 63
LEFT_BRACKET (283)
RIGHT_BRACKET (284)
LEFT_CURR_BRACKET (285)
RIGHT_CURR_BRACKET (286)
RETURN (287) 22
END (288) 5 14 15
COMMA (289) 50 54
READ (290)
WRITE (291)
STRINGLITERAL (292) 19 21 30
INVALIDVAR (293)
VARIABLE (294) 6 7 17 18 19 20 21 26 27 52 54 65


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
start (41)
    on left: 1 2, on right: 0
void (42)
    on left: 3 4, on right: 2 4
function (43)
    on left: 5, on right: 2 4
functiondec (44)
    on left: 6, on right: 5
functioncall (45)
    on left: 7, on right: 23 24 25 26 27
elses (46)
    on left: 8 9, on right: 14
statements (47)
    on left: 10 11, on right: 5 9 14 15
s2 (48)
    on left: 12 13, on right: 11 13
rule (49)
    on left: 14 15 16, on right: 11 13
statement (50)
    on left: 17 18 19 20 21 22 23 24 25 26 27, on right: 16 39
conditional (51)
    on left: 28 29 30, on right: 14 15 41
boolean (52)
    on left: 31 32, on right: 29 42
condition (53)
    on left: 33 34 35 36 37 38, on right: 28 29 30
retval (54)
    on left: 39 40 41 42, on right: 22
type (55)
    on left: 43 44 45, on right: 52 54
input (56)
    on left: 46, on right: 48 50
inputargs (57)
    on left: 47 48, on right: 7
inputargs2 (58)
    on left: 49 50, on right: 48 50
declarationargs (59)
    on left: 51 52, on right: 6
declarationargs2 (60)
    on left: 53 54, on right: 52 54
exp (61)
    on left: 55 56, on right: 18 20 28 29 40 46 55 63
addop (62)
    on left: 57 58, on right: 24 55
term (63)
    on left: 59 60, on right: 55 56 59
mulop (64)
    on left: 61 62, on right: 25 59
factor (65)
    on left: 63 64 65, on right: 59 60


State 0

    0 $accept: . start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (start)

    start     go to state 2
    function  go to state 3


State 1

    5 function: FUNCTION . functiondec statements END

    VARIABLE  shift, and go to state 4

    functiondec  go to state 5


State 2

    0 $accept: start . $end

    $end  shift, and go to state 6


State 3

    2 start: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 7
    function  go to state 8


State 4

    6 functiondec: VARIABLE . LEFT_PREN declarationargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 9


State 5

    5 function: FUNCTION functiondec . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 17
    rule          go to state 18
    statement     go to state 19


State 6

    0 $accept: start $end .

    $default  accept


State 7

    2 start: function void .

    $default  reduce using rule 2 (start)


State 8

    4 void: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 20
    function  go to state 8


State 9

    6 functiondec: VARIABLE LEFT_PREN . declarationargs RIGHT_PREN

    INT     shift, and go to state 21
    STRING  shift, and go to state 22

    RIGHT_PREN  reduce using rule 51 (declarationargs)
    $default    reduce using rule 43 (type)

    type             go to state 23
    declarationargs  go to state 24


State 10

   17 statement: INT . VARIABLE
   20          | INT . VARIABLE EQUAL exp
   27          | INT . VARIABLE EQUAL functioncall

    VARIABLE  shift, and go to state 25


State 11

   21 statement: STRING . VARIABLE EQUAL STRINGLITERAL

    VARIABLE  shift, and go to state 26


State 12

   15 rule: WHILE . conditional DO statements END

    DIGIT          shift, and go to state 27
    LEFT_PREN      shift, and go to state 28
    STRINGLITERAL  shift, and go to state 29
    VARIABLE       shift, and go to state 30

    conditional  go to state 31
    exp          go to state 32
    term         go to state 33
    factor       go to state 34


State 13

   14 rule: IF . conditional statements elses END

    DIGIT          shift, and go to state 27
    LEFT_PREN      shift, and go to state 28
    STRINGLITERAL  shift, and go to state 29
    VARIABLE       shift, and go to state 30

    conditional  go to state 35
    exp          go to state 32
    term         go to state 33
    factor       go to state 34


State 14

   22 statement: RETURN . retval

    DIGIT          shift, and go to state 27
    INT            shift, and go to state 10
    STRING         shift, and go to state 11
    TRUE           shift, and go to state 36
    FALSE          shift, and go to state 37
    LEFT_PREN      shift, and go to state 28
    RETURN         shift, and go to state 14
    STRINGLITERAL  shift, and go to state 29
    VARIABLE       shift, and go to state 38

    functioncall  go to state 16
    statement     go to state 39
    conditional   go to state 40
    boolean       go to state 41
    retval        go to state 42
    exp           go to state 43
    term          go to state 33
    factor        go to state 34


State 15

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL exp
   19          | VARIABLE . EQUAL STRINGLITERAL
   26          | VARIABLE . EQUAL functioncall

    EQUAL      shift, and go to state 44
    LEFT_PREN  shift, and go to state 45


State 16

   23 statement: functioncall .
   24          | functioncall . addop functioncall
   25          | functioncall . mulop functioncall

    MULTIPLY  shift, and go to state 46
    ADD       shift, and go to state 47
    SUBTRACT  shift, and go to state 48
    DIVISION  shift, and go to state 49

    $default  reduce using rule 23 (statement)

    addop  go to state 50
    mulop  go to state 51


State 17

    5 function: FUNCTION functiondec statements . END

    END  shift, and go to state 52


State 18

   11 statements: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 12 (s2)

    functioncall  go to state 16
    s2            go to state 53
    rule          go to state 54
    statement     go to state 19


State 19

   16 rule: statement .

    $default  reduce using rule 16 (rule)


State 20

    4 void: function void .

    $default  reduce using rule 4 (void)


State 21

   44 type: INT .

    $default  reduce using rule 44 (type)


State 22

   45 type: STRING .

    $default  reduce using rule 45 (type)


State 23

   52 declarationargs: type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 55


State 24

    6 functiondec: VARIABLE LEFT_PREN declarationargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 56


State 25

   17 statement: INT VARIABLE .
   20          | INT VARIABLE . EQUAL exp
   27          | INT VARIABLE . EQUAL functioncall

    EQUAL  shift, and go to state 57

    $default  reduce using rule 17 (statement)


State 26

   21 statement: STRING VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 58


State 27

   64 factor: DIGIT .

    $default  reduce using rule 64 (factor)


State 28

   63 factor: LEFT_PREN . exp RIGHT_PREN

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    exp     go to state 59
    term    go to state 33
    factor  go to state 34


State 29

   30 conditional: STRINGLITERAL . condition STRINGLITERAL

    NOTEQUIVALENT   shift, and go to state 60
    LESSEROREQUAL   shift, and go to state 61
    EQUIVALENT      shift, and go to state 62
    GREATEROREQUAL  shift, and go to state 63
    LESSTHAN        shift, and go to state 64
    GREATERTHAN     shift, and go to state 65

    condition  go to state 66


State 30

   65 factor: VARIABLE .

    $default  reduce using rule 65 (factor)


State 31

   15 rule: WHILE conditional . DO statements END

    DO  shift, and go to state 67


State 32

   28 conditional: exp . condition exp
   29            | exp . condition boolean
   55 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 60
    ADD             shift, and go to state 47
    SUBTRACT        shift, and go to state 48
    LESSEROREQUAL   shift, and go to state 61
    EQUIVALENT      shift, and go to state 62
    GREATEROREQUAL  shift, and go to state 63
    LESSTHAN        shift, and go to state 64
    GREATERTHAN     shift, and go to state 65

    condition  go to state 68
    addop      go to state 69


State 33

   56 exp: term .
   59 term: term . mulop factor

    MULTIPLY  shift, and go to state 46
    DIVISION  shift, and go to state 49

    $default  reduce using rule 56 (exp)

    mulop  go to state 70


State 34

   60 term: factor .

    $default  reduce using rule 60 (term)


State 35

   14 rule: IF conditional . statements elses END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 71
    rule          go to state 18
    statement     go to state 19


State 36

   31 boolean: TRUE .

    $default  reduce using rule 31 (boolean)


State 37

   32 boolean: FALSE .

    $default  reduce using rule 32 (boolean)


State 38

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL exp
   19          | VARIABLE . EQUAL STRINGLITERAL
   26          | VARIABLE . EQUAL functioncall
   65 factor: VARIABLE .

    EQUAL      shift, and go to state 44
    LEFT_PREN  shift, and go to state 45

    $default  reduce using rule 65 (factor)


State 39

   39 retval: statement .

    $default  reduce using rule 39 (retval)


State 40

   41 retval: conditional .

    $default  reduce using rule 41 (retval)


State 41

   42 retval: boolean .

    $default  reduce using rule 42 (retval)


State 42

   22 statement: RETURN retval .

    $default  reduce using rule 22 (statement)


State 43

   28 conditional: exp . condition exp
   29            | exp . condition boolean
   40 retval: exp .
   55 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 60
    ADD             shift, and go to state 47
    SUBTRACT        shift, and go to state 48
    LESSEROREQUAL   shift, and go to state 61
    EQUIVALENT      shift, and go to state 62
    GREATEROREQUAL  shift, and go to state 63
    LESSTHAN        shift, and go to state 64
    GREATERTHAN     shift, and go to state 65

    $default  reduce using rule 40 (retval)

    condition  go to state 68
    addop      go to state 69


State 44

   18 statement: VARIABLE EQUAL . exp
   19          | VARIABLE EQUAL . STRINGLITERAL
   26          | VARIABLE EQUAL . functioncall

    DIGIT          shift, and go to state 27
    LEFT_PREN      shift, and go to state 28
    STRINGLITERAL  shift, and go to state 72
    VARIABLE       shift, and go to state 73

    functioncall  go to state 74
    exp           go to state 75
    term          go to state 33
    factor        go to state 34


State 45

    7 functioncall: VARIABLE LEFT_PREN . inputargs RIGHT_PREN

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    $default  reduce using rule 47 (inputargs)

    input      go to state 76
    inputargs  go to state 77
    exp        go to state 78
    term       go to state 33
    factor     go to state 34


State 46

   61 mulop: MULTIPLY .

    $default  reduce using rule 61 (mulop)


State 47

   57 addop: ADD .

    $default  reduce using rule 57 (addop)


State 48

   58 addop: SUBTRACT .

    $default  reduce using rule 58 (addop)


State 49

   62 mulop: DIVISION .

    $default  reduce using rule 62 (mulop)


State 50

   24 statement: functioncall addop . functioncall

    VARIABLE  shift, and go to state 79

    functioncall  go to state 80


State 51

   25 statement: functioncall mulop . functioncall

    VARIABLE  shift, and go to state 79

    functioncall  go to state 81


State 52

    5 function: FUNCTION functiondec statements END .

    $default  reduce using rule 5 (function)


State 53

   11 statements: rule s2 .

    $default  reduce using rule 11 (statements)


State 54

   13 s2: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 12 (s2)

    functioncall  go to state 16
    s2            go to state 82
    rule          go to state 54
    statement     go to state 19


State 55

   52 declarationargs: type VARIABLE . declarationargs2

    COMMA  shift, and go to state 83

    $default  reduce using rule 53 (declarationargs2)

    declarationargs2  go to state 84


State 56

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN .

    $default  reduce using rule 6 (functiondec)


State 57

   20 statement: INT VARIABLE EQUAL . exp
   27          | INT VARIABLE EQUAL . functioncall

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 73

    functioncall  go to state 85
    exp           go to state 86
    term          go to state 33
    factor        go to state 34


State 58

   21 statement: STRING VARIABLE EQUAL . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 87


State 59

   55 exp: exp . addop term
   63 factor: LEFT_PREN exp . RIGHT_PREN

    ADD         shift, and go to state 47
    SUBTRACT    shift, and go to state 48
    RIGHT_PREN  shift, and go to state 88

    addop  go to state 69


State 60

   38 condition: NOTEQUIVALENT .

    $default  reduce using rule 38 (condition)


State 61

   33 condition: LESSEROREQUAL .

    $default  reduce using rule 33 (condition)


State 62

   37 condition: EQUIVALENT .

    $default  reduce using rule 37 (condition)


State 63

   34 condition: GREATEROREQUAL .

    $default  reduce using rule 34 (condition)


State 64

   35 condition: LESSTHAN .

    $default  reduce using rule 35 (condition)


State 65

   36 condition: GREATERTHAN .

    $default  reduce using rule 36 (condition)


State 66

   30 conditional: STRINGLITERAL condition . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 89


State 67

   15 rule: WHILE conditional DO . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 90
    rule          go to state 18
    statement     go to state 19


State 68

   28 conditional: exp condition . exp
   29            | exp condition . boolean

    DIGIT      shift, and go to state 27
    TRUE       shift, and go to state 36
    FALSE      shift, and go to state 37
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    boolean  go to state 91
    exp      go to state 92
    term     go to state 33
    factor   go to state 34


State 69

   55 exp: exp addop . term

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    term    go to state 93
    factor  go to state 34


State 70

   59 term: term mulop . factor

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    factor  go to state 94


State 71

   14 rule: IF conditional statements . elses END

    ELSE  shift, and go to state 95

    $default  reduce using rule 8 (elses)

    elses  go to state 96


State 72

   19 statement: VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 19 (statement)


State 73

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   65 factor: VARIABLE .

    LEFT_PREN  shift, and go to state 45

    $default  reduce using rule 65 (factor)


State 74

   26 statement: VARIABLE EQUAL functioncall .

    $default  reduce using rule 26 (statement)


State 75

   18 statement: VARIABLE EQUAL exp .
   55 exp: exp . addop term

    ADD       shift, and go to state 47
    SUBTRACT  shift, and go to state 48

    $default  reduce using rule 18 (statement)

    addop  go to state 69


State 76

   48 inputargs: input . inputargs2

    COMMA  shift, and go to state 97

    $default  reduce using rule 49 (inputargs2)

    inputargs2  go to state 98


State 77

    7 functioncall: VARIABLE LEFT_PREN inputargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 99


State 78

   46 input: exp .
   55 exp: exp . addop term

    ADD       shift, and go to state 47
    SUBTRACT  shift, and go to state 48

    $default  reduce using rule 46 (input)

    addop  go to state 69


State 79

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 45


State 80

   24 statement: functioncall addop functioncall .

    $default  reduce using rule 24 (statement)


State 81

   25 statement: functioncall mulop functioncall .

    $default  reduce using rule 25 (statement)


State 82

   13 s2: rule s2 .

    $default  reduce using rule 13 (s2)


State 83

   54 declarationargs2: COMMA . type VARIABLE declarationargs2

    INT     shift, and go to state 21
    STRING  shift, and go to state 22

    $default  reduce using rule 43 (type)

    type  go to state 100


State 84

   52 declarationargs: type VARIABLE declarationargs2 .

    $default  reduce using rule 52 (declarationargs)


State 85

   27 statement: INT VARIABLE EQUAL functioncall .

    $default  reduce using rule 27 (statement)


State 86

   20 statement: INT VARIABLE EQUAL exp .
   55 exp: exp . addop term

    ADD       shift, and go to state 47
    SUBTRACT  shift, and go to state 48

    $default  reduce using rule 20 (statement)

    addop  go to state 69


State 87

   21 statement: STRING VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 21 (statement)


State 88

   63 factor: LEFT_PREN exp RIGHT_PREN .

    $default  reduce using rule 63 (factor)


State 89

   30 conditional: STRINGLITERAL condition STRINGLITERAL .

    $default  reduce using rule 30 (conditional)


State 90

   15 rule: WHILE conditional DO statements . END

    END  shift, and go to state 101


State 91

   29 conditional: exp condition boolean .

    $default  reduce using rule 29 (conditional)


State 92

   28 conditional: exp condition exp .
   55 exp: exp . addop term

    ADD       shift, and go to state 47
    SUBTRACT  shift, and go to state 48

    $default  reduce using rule 28 (conditional)

    addop  go to state 69


State 93

   55 exp: exp addop term .
   59 term: term . mulop factor

    MULTIPLY  shift, and go to state 46
    DIVISION  shift, and go to state 49

    $default  reduce using rule 55 (exp)

    mulop  go to state 70


State 94

   59 term: term mulop factor .

    $default  reduce using rule 59 (term)


State 95

    9 elses: ELSE . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    VARIABLE  shift, and go to state 15

    $default  reduce using rule 10 (statements)

    functioncall  go to state 16
    statements    go to state 102
    rule          go to state 18
    statement     go to state 19


State 96

   14 rule: IF conditional statements elses . END

    END  shift, and go to state 103


State 97

   50 inputargs2: COMMA . input inputargs2

    DIGIT      shift, and go to state 27
    LEFT_PREN  shift, and go to state 28
    VARIABLE   shift, and go to state 30

    input   go to state 104
    exp     go to state 78
    term    go to state 33
    factor  go to state 34


State 98

   48 inputargs: input inputargs2 .

    $default  reduce using rule 48 (inputargs)


State 99

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN .

    $default  reduce using rule 7 (functioncall)


State 100

   54 declarationargs2: COMMA type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 105


State 101

   15 rule: WHILE conditional DO statements END .

    $default  reduce using rule 15 (rule)


State 102

    9 elses: ELSE statements .

    $default  reduce using rule 9 (elses)


State 103

   14 rule: IF conditional statements elses END .

    $default  reduce using rule 14 (rule)


State 104

   50 inputargs2: COMMA input . inputargs2

    COMMA  shift, and go to state 97

    $default  reduce using rule 49 (inputargs2)

    inputargs2  go to state 106


State 105

   54 declarationargs2: COMMA type VARIABLE . declarationargs2

    COMMA  shift, and go to state 83

    $default  reduce using rule 53 (declarationargs2)

    declarationargs2  go to state 107


State 106

   50 inputargs2: COMMA input inputargs2 .

    $default  reduce using rule 50 (inputargs2)


State 107

   54 declarationargs2: COMMA type VARIABLE declarationargs2 .

    $default  reduce using rule 54 (declarationargs2)
