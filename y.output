Terminals unused in grammar

   INDEX
   THEN
   DO
   LEFT_BRACKET
   RIGHT_BRACKET
   LEFT_CURR_BRACKET
   RIGHT_CURR_BRACKET
   READ
   INVALIDVAR


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | function void

    3 void: %empty
    4     | function void

    5 function: FUNCTION functiondec statements END

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN

    8 elses: %empty
    9      | ELSE statements

   10 statements: %empty
   11           | rule s2

   12 s2: %empty
   13   | rule s2

   14 rule: IF conditional statements elses END
   15     | WHILE conditional statements END
   16     | statement

   17 statement: INT VARIABLE
   18          | VARIABLE EQUAL exp
   19          | VARIABLE EQUAL STRINGLITERAL
   20          | INT VARIABLE EQUAL exp
   21          | WRITE DIGIT
   22          | WRITE VARIABLE
   23          | WRITE STRINGLITERAL
   24          | STRING VARIABLE EQUAL STRINGLITERAL
   25          | RETURN retval
   26          | functioncall
   27          | functioncall addop functioncall
   28          | functioncall mulop functioncall
   29          | VARIABLE EQUAL functioncall
   30          | INT VARIABLE EQUAL functioncall

   31 conditional: exp condition exp
   32            | exp condition boolean
   33            | STRINGLITERAL condition STRINGLITERAL

   34 boolean: TRUE
   35        | FALSE

   36 condition: LESSEROREQUAL
   37          | GREATEROREQUAL
   38          | LESSTHAN
   39          | GREATERTHAN
   40          | EQUIVALENT
   41          | NOTEQUIVALENT

   42 retval: statement
   43       | exp
   44       | conditional
   45       | boolean

   46 type: %empty
   47     | INT
   48     | STRING

   49 input: exp

   50 inputargs: %empty
   51          | input inputargs2

   52 inputargs2: %empty
   53           | COMMA input inputargs2

   54 declarationargs: %empty
   55                | type VARIABLE declarationargs2

   56 declarationargs2: %empty
   57                 | COMMA type VARIABLE declarationargs2

   58 exp: exp addop term
   59    | term

   60 addop: ADD
   61      | SUBTRACT

   62 term: term mulop factor
   63     | factor

   64 mulop: MULTIPLY
   65      | DIVISION

   66 factor: LEFT_PREN exp RIGHT_PREN
   67       | DIGIT
   68       | VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGIT (258) 21 67
INT (259) 17 20 30 47
INDEX (260)
THEN (261)
STRING (262) 24 48
EQUAL (263) 18 19 20 24 29 30
NOTEQUIVALENT (264) 41
TRUE (265) 34
FALSE (266) 35
MULTIPLY (267) 64
ADD (268) 60
SUBTRACT (269) 61
DIVISION (270) 65
LESSEROREQUAL (271) 36
EQUIVALENT (272) 40
GREATEROREQUAL (273) 37
LESSTHAN (274) 38
GREATERTHAN (275) 39
WHILE (276) 15
DO (277)
IF (278) 14
ELSE (279) 9
FUNCTION (280) 5
LEFT_PREN (281) 6 7 66
RIGHT_PREN (282) 6 7 66
LEFT_BRACKET (283)
RIGHT_BRACKET (284)
LEFT_CURR_BRACKET (285)
RIGHT_CURR_BRACKET (286)
RETURN (287) 25
END (288) 5 14 15
COMMA (289) 53 57
READ (290)
WRITE (291) 21 22 23
INVALIDVAR (292)
VARIABLE (293) 6 7 17 18 19 20 22 24 29 30 55 57 68
STRINGLITERAL (294) 19 23 24 33


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
start (41)
    on left: 1 2, on right: 0
void (42)
    on left: 3 4, on right: 2 4
function (43)
    on left: 5, on right: 2 4
functiondec (44)
    on left: 6, on right: 5
functioncall (45)
    on left: 7, on right: 26 27 28 29 30
elses (46)
    on left: 8 9, on right: 14
statements (47)
    on left: 10 11, on right: 5 9 14 15
s2 (48)
    on left: 12 13, on right: 11 13
rule (49)
    on left: 14 15 16, on right: 11 13
statement (50)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30, on right: 16
    42
conditional (51)
    on left: 31 32 33, on right: 14 15 44
boolean (52)
    on left: 34 35, on right: 32 45
condition (53)
    on left: 36 37 38 39 40 41, on right: 31 32 33
retval (54)
    on left: 42 43 44 45, on right: 25
type (55)
    on left: 46 47 48, on right: 55 57
input (56)
    on left: 49, on right: 51 53
inputargs (57)
    on left: 50 51, on right: 7
inputargs2 (58)
    on left: 52 53, on right: 51 53
declarationargs (59)
    on left: 54 55, on right: 6
declarationargs2 (60)
    on left: 56 57, on right: 55 57
exp (61)
    on left: 58 59, on right: 18 20 31 32 43 49 58 66
addop (62)
    on left: 60 61, on right: 27 58
term (63)
    on left: 62 63, on right: 58 59 62
mulop (64)
    on left: 64 65, on right: 28 62
factor (65)
    on left: 66 67 68, on right: 62 63


State 0

    0 $accept: . start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (start)

    start     go to state 2
    function  go to state 3


State 1

    5 function: FUNCTION . functiondec statements END

    VARIABLE  shift, and go to state 4

    functiondec  go to state 5


State 2

    0 $accept: start . $end

    $end  shift, and go to state 6


State 3

    2 start: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 7
    function  go to state 8


State 4

    6 functiondec: VARIABLE . LEFT_PREN declarationargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 9


State 5

    5 function: FUNCTION functiondec . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 18
    rule          go to state 19
    statement     go to state 20


State 6

    0 $accept: start $end .

    $default  accept


State 7

    2 start: function void .

    $default  reduce using rule 2 (start)


State 8

    4 void: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 21
    function  go to state 8


State 9

    6 functiondec: VARIABLE LEFT_PREN . declarationargs RIGHT_PREN

    INT     shift, and go to state 22
    STRING  shift, and go to state 23

    RIGHT_PREN  reduce using rule 54 (declarationargs)
    $default    reduce using rule 46 (type)

    type             go to state 24
    declarationargs  go to state 25


State 10

   17 statement: INT . VARIABLE
   20          | INT . VARIABLE EQUAL exp
   30          | INT . VARIABLE EQUAL functioncall

    VARIABLE  shift, and go to state 26


State 11

   24 statement: STRING . VARIABLE EQUAL STRINGLITERAL

    VARIABLE  shift, and go to state 27


State 12

   15 rule: WHILE . conditional statements END

    DIGIT          shift, and go to state 28
    LEFT_PREN      shift, and go to state 29
    VARIABLE       shift, and go to state 30
    STRINGLITERAL  shift, and go to state 31

    conditional  go to state 32
    exp          go to state 33
    term         go to state 34
    factor       go to state 35


State 13

   14 rule: IF . conditional statements elses END

    DIGIT          shift, and go to state 28
    LEFT_PREN      shift, and go to state 29
    VARIABLE       shift, and go to state 30
    STRINGLITERAL  shift, and go to state 31

    conditional  go to state 36
    exp          go to state 33
    term         go to state 34
    factor       go to state 35


State 14

   25 statement: RETURN . retval

    DIGIT          shift, and go to state 28
    INT            shift, and go to state 10
    STRING         shift, and go to state 11
    TRUE           shift, and go to state 37
    FALSE          shift, and go to state 38
    LEFT_PREN      shift, and go to state 29
    RETURN         shift, and go to state 14
    WRITE          shift, and go to state 15
    VARIABLE       shift, and go to state 39
    STRINGLITERAL  shift, and go to state 31

    functioncall  go to state 17
    statement     go to state 40
    conditional   go to state 41
    boolean       go to state 42
    retval        go to state 43
    exp           go to state 44
    term          go to state 34
    factor        go to state 35


State 15

   21 statement: WRITE . DIGIT
   22          | WRITE . VARIABLE
   23          | WRITE . STRINGLITERAL

    DIGIT          shift, and go to state 45
    VARIABLE       shift, and go to state 46
    STRINGLITERAL  shift, and go to state 47


State 16

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL exp
   19          | VARIABLE . EQUAL STRINGLITERAL
   29          | VARIABLE . EQUAL functioncall

    EQUAL      shift, and go to state 48
    LEFT_PREN  shift, and go to state 49


State 17

   26 statement: functioncall .
   27          | functioncall . addop functioncall
   28          | functioncall . mulop functioncall

    MULTIPLY  shift, and go to state 50
    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52
    DIVISION  shift, and go to state 53

    $default  reduce using rule 26 (statement)

    addop  go to state 54
    mulop  go to state 55


State 18

    5 function: FUNCTION functiondec statements . END

    END  shift, and go to state 56


State 19

   11 statements: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 12 (s2)

    functioncall  go to state 17
    s2            go to state 57
    rule          go to state 58
    statement     go to state 20


State 20

   16 rule: statement .

    $default  reduce using rule 16 (rule)


State 21

    4 void: function void .

    $default  reduce using rule 4 (void)


State 22

   47 type: INT .

    $default  reduce using rule 47 (type)


State 23

   48 type: STRING .

    $default  reduce using rule 48 (type)


State 24

   55 declarationargs: type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 59


State 25

    6 functiondec: VARIABLE LEFT_PREN declarationargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 60


State 26

   17 statement: INT VARIABLE .
   20          | INT VARIABLE . EQUAL exp
   30          | INT VARIABLE . EQUAL functioncall

    EQUAL  shift, and go to state 61

    $default  reduce using rule 17 (statement)


State 27

   24 statement: STRING VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 62


State 28

   67 factor: DIGIT .

    $default  reduce using rule 67 (factor)


State 29

   66 factor: LEFT_PREN . exp RIGHT_PREN

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 30

    exp     go to state 63
    term    go to state 34
    factor  go to state 35


State 30

   68 factor: VARIABLE .

    $default  reduce using rule 68 (factor)


State 31

   33 conditional: STRINGLITERAL . condition STRINGLITERAL

    NOTEQUIVALENT   shift, and go to state 64
    LESSEROREQUAL   shift, and go to state 65
    EQUIVALENT      shift, and go to state 66
    GREATEROREQUAL  shift, and go to state 67
    LESSTHAN        shift, and go to state 68
    GREATERTHAN     shift, and go to state 69

    condition  go to state 70


State 32

   15 rule: WHILE conditional . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 71
    rule          go to state 19
    statement     go to state 20


State 33

   31 conditional: exp . condition exp
   32            | exp . condition boolean
   58 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 64
    ADD             shift, and go to state 51
    SUBTRACT        shift, and go to state 52
    LESSEROREQUAL   shift, and go to state 65
    EQUIVALENT      shift, and go to state 66
    GREATEROREQUAL  shift, and go to state 67
    LESSTHAN        shift, and go to state 68
    GREATERTHAN     shift, and go to state 69

    condition  go to state 72
    addop      go to state 73


State 34

   59 exp: term .
   62 term: term . mulop factor

    MULTIPLY  shift, and go to state 50
    DIVISION  shift, and go to state 53

    $default  reduce using rule 59 (exp)

    mulop  go to state 74


State 35

   63 term: factor .

    $default  reduce using rule 63 (term)


State 36

   14 rule: IF conditional . statements elses END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 75
    rule          go to state 19
    statement     go to state 20


State 37

   34 boolean: TRUE .

    $default  reduce using rule 34 (boolean)


State 38

   35 boolean: FALSE .

    $default  reduce using rule 35 (boolean)


State 39

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL exp
   19          | VARIABLE . EQUAL STRINGLITERAL
   29          | VARIABLE . EQUAL functioncall
   68 factor: VARIABLE .

    EQUAL      shift, and go to state 48
    LEFT_PREN  shift, and go to state 49

    $default  reduce using rule 68 (factor)


State 40

   42 retval: statement .

    $default  reduce using rule 42 (retval)


State 41

   44 retval: conditional .

    $default  reduce using rule 44 (retval)


State 42

   45 retval: boolean .

    $default  reduce using rule 45 (retval)


State 43

   25 statement: RETURN retval .

    $default  reduce using rule 25 (statement)


State 44

   31 conditional: exp . condition exp
   32            | exp . condition boolean
   43 retval: exp .
   58 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 64
    ADD             shift, and go to state 51
    SUBTRACT        shift, and go to state 52
    LESSEROREQUAL   shift, and go to state 65
    EQUIVALENT      shift, and go to state 66
    GREATEROREQUAL  shift, and go to state 67
    LESSTHAN        shift, and go to state 68
    GREATERTHAN     shift, and go to state 69

    $default  reduce using rule 43 (retval)

    condition  go to state 72
    addop      go to state 73


State 45

   21 statement: WRITE DIGIT .

    $default  reduce using rule 21 (statement)


State 46

   22 statement: WRITE VARIABLE .

    $default  reduce using rule 22 (statement)


State 47

   23 statement: WRITE STRINGLITERAL .

    $default  reduce using rule 23 (statement)


State 48

   18 statement: VARIABLE EQUAL . exp
   19          | VARIABLE EQUAL . STRINGLITERAL
   29          | VARIABLE EQUAL . functioncall

    DIGIT          shift, and go to state 28
    LEFT_PREN      shift, and go to state 29
    VARIABLE       shift, and go to state 76
    STRINGLITERAL  shift, and go to state 77

    functioncall  go to state 78
    exp           go to state 79
    term          go to state 34
    factor        go to state 35


State 49

    7 functioncall: VARIABLE LEFT_PREN . inputargs RIGHT_PREN

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 30

    $default  reduce using rule 50 (inputargs)

    input      go to state 80
    inputargs  go to state 81
    exp        go to state 82
    term       go to state 34
    factor     go to state 35


State 50

   64 mulop: MULTIPLY .

    $default  reduce using rule 64 (mulop)


State 51

   60 addop: ADD .

    $default  reduce using rule 60 (addop)


State 52

   61 addop: SUBTRACT .

    $default  reduce using rule 61 (addop)


State 53

   65 mulop: DIVISION .

    $default  reduce using rule 65 (mulop)


State 54

   27 statement: functioncall addop . functioncall

    VARIABLE  shift, and go to state 83

    functioncall  go to state 84


State 55

   28 statement: functioncall mulop . functioncall

    VARIABLE  shift, and go to state 83

    functioncall  go to state 85


State 56

    5 function: FUNCTION functiondec statements END .

    $default  reduce using rule 5 (function)


State 57

   11 statements: rule s2 .

    $default  reduce using rule 11 (statements)


State 58

   13 s2: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 12 (s2)

    functioncall  go to state 17
    s2            go to state 86
    rule          go to state 58
    statement     go to state 20


State 59

   55 declarationargs: type VARIABLE . declarationargs2

    COMMA  shift, and go to state 87

    $default  reduce using rule 56 (declarationargs2)

    declarationargs2  go to state 88


State 60

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN .

    $default  reduce using rule 6 (functiondec)


State 61

   20 statement: INT VARIABLE EQUAL . exp
   30          | INT VARIABLE EQUAL . functioncall

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 76

    functioncall  go to state 89
    exp           go to state 90
    term          go to state 34
    factor        go to state 35


State 62

   24 statement: STRING VARIABLE EQUAL . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 91


State 63

   58 exp: exp . addop term
   66 factor: LEFT_PREN exp . RIGHT_PREN

    ADD         shift, and go to state 51
    SUBTRACT    shift, and go to state 52
    RIGHT_PREN  shift, and go to state 92

    addop  go to state 73


State 64

   41 condition: NOTEQUIVALENT .

    $default  reduce using rule 41 (condition)


State 65

   36 condition: LESSEROREQUAL .

    $default  reduce using rule 36 (condition)


State 66

   40 condition: EQUIVALENT .

    $default  reduce using rule 40 (condition)


State 67

   37 condition: GREATEROREQUAL .

    $default  reduce using rule 37 (condition)


State 68

   38 condition: LESSTHAN .

    $default  reduce using rule 38 (condition)


State 69

   39 condition: GREATERTHAN .

    $default  reduce using rule 39 (condition)


State 70

   33 conditional: STRINGLITERAL condition . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 93


State 71

   15 rule: WHILE conditional statements . END

    END  shift, and go to state 94


State 72

   31 conditional: exp condition . exp
   32            | exp condition . boolean

    DIGIT      shift, and go to state 28
    TRUE       shift, and go to state 37
    FALSE      shift, and go to state 38
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 30

    boolean  go to state 95
    exp      go to state 96
    term     go to state 34
    factor   go to state 35


State 73

   58 exp: exp addop . term

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 30

    term    go to state 97
    factor  go to state 35


State 74

   62 term: term mulop . factor

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 30

    factor  go to state 98


State 75

   14 rule: IF conditional statements . elses END

    ELSE  shift, and go to state 99

    $default  reduce using rule 8 (elses)

    elses  go to state 100


State 76

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   68 factor: VARIABLE .

    LEFT_PREN  shift, and go to state 49

    $default  reduce using rule 68 (factor)


State 77

   19 statement: VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 19 (statement)


State 78

   29 statement: VARIABLE EQUAL functioncall .

    $default  reduce using rule 29 (statement)


State 79

   18 statement: VARIABLE EQUAL exp .
   58 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 18 (statement)

    addop  go to state 73


State 80

   51 inputargs: input . inputargs2

    COMMA  shift, and go to state 101

    $default  reduce using rule 52 (inputargs2)

    inputargs2  go to state 102


State 81

    7 functioncall: VARIABLE LEFT_PREN inputargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 103


State 82

   49 input: exp .
   58 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 49 (input)

    addop  go to state 73


State 83

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 49


State 84

   27 statement: functioncall addop functioncall .

    $default  reduce using rule 27 (statement)


State 85

   28 statement: functioncall mulop functioncall .

    $default  reduce using rule 28 (statement)


State 86

   13 s2: rule s2 .

    $default  reduce using rule 13 (s2)


State 87

   57 declarationargs2: COMMA . type VARIABLE declarationargs2

    INT     shift, and go to state 22
    STRING  shift, and go to state 23

    $default  reduce using rule 46 (type)

    type  go to state 104


State 88

   55 declarationargs: type VARIABLE declarationargs2 .

    $default  reduce using rule 55 (declarationargs)


State 89

   30 statement: INT VARIABLE EQUAL functioncall .

    $default  reduce using rule 30 (statement)


State 90

   20 statement: INT VARIABLE EQUAL exp .
   58 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 20 (statement)

    addop  go to state 73


State 91

   24 statement: STRING VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 24 (statement)


State 92

   66 factor: LEFT_PREN exp RIGHT_PREN .

    $default  reduce using rule 66 (factor)


State 93

   33 conditional: STRINGLITERAL condition STRINGLITERAL .

    $default  reduce using rule 33 (conditional)


State 94

   15 rule: WHILE conditional statements END .

    $default  reduce using rule 15 (rule)


State 95

   32 conditional: exp condition boolean .

    $default  reduce using rule 32 (conditional)


State 96

   31 conditional: exp condition exp .
   58 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 31 (conditional)

    addop  go to state 73


State 97

   58 exp: exp addop term .
   62 term: term . mulop factor

    MULTIPLY  shift, and go to state 50
    DIVISION  shift, and go to state 53

    $default  reduce using rule 58 (exp)

    mulop  go to state 74


State 98

   62 term: term mulop factor .

    $default  reduce using rule 62 (term)


State 99

    9 elses: ELSE . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 105
    rule          go to state 19
    statement     go to state 20


State 100

   14 rule: IF conditional statements elses . END

    END  shift, and go to state 106


State 101

   53 inputargs2: COMMA . input inputargs2

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 30

    input   go to state 107
    exp     go to state 82
    term    go to state 34
    factor  go to state 35


State 102

   51 inputargs: input inputargs2 .

    $default  reduce using rule 51 (inputargs)


State 103

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN .

    $default  reduce using rule 7 (functioncall)


State 104

   57 declarationargs2: COMMA type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 108


State 105

    9 elses: ELSE statements .

    $default  reduce using rule 9 (elses)


State 106

   14 rule: IF conditional statements elses END .

    $default  reduce using rule 14 (rule)


State 107

   53 inputargs2: COMMA input . inputargs2

    COMMA  shift, and go to state 101

    $default  reduce using rule 52 (inputargs2)

    inputargs2  go to state 109


State 108

   57 declarationargs2: COMMA type VARIABLE . declarationargs2

    COMMA  shift, and go to state 87

    $default  reduce using rule 56 (declarationargs2)

    declarationargs2  go to state 110


State 109

   53 inputargs2: COMMA input inputargs2 .

    $default  reduce using rule 53 (inputargs2)


State 110

   57 declarationargs2: COMMA type VARIABLE declarationargs2 .

    $default  reduce using rule 57 (declarationargs2)
