Terminals unused in grammar

   INDEX
   LEFT_BRACKET
   RIGHT_BRACKET
   LEFT_CURR_BRACKET
   RIGHT_CURR_BRACKET
   READ
   WRITE
   INVALIDVAR


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | function

    3 function: FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements RETURN END
    4         | FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements END

    5 statements: IF conditional statements END
    6           | IF conditional statements ELSE statements END
    7           | WHILE conditional DO statements END
    8           | INT VARIABLE
    9           | VARIABLE EQUAL exp
   10           | VARIABLE EQUAL STRINGLITERAL
   11           | INT VARIABLE EQUAL exp
   12           | INT VARIABLE EQUAL VARIABLE
   13           | STRING VARIABLE EQUAL STRINGLITERAL
   14           | RETURN VARIABLE
   15           | RETURN conditional
   16           | RETURN exp
   17           | RETURN TRUE
   18           | RETURN FALSE

   19 conditional: VARIABLE condition VARIABLE
   20            | VARIABLE condition DIGIT
   21            | STRINGLITERAL condition STRINGLITERAL
   22            | exp condition exp

   23 condition: LESSEROREQUAL
   24          | GREATEROREQUAL
   25          | LESSTHAN
   26          | GREATERTHAN
   27          | EQUIVALENT
   28          | NOTEQUAL

   29 args: args COMMA VARIABLE
   30     | VARIABLE

   31 exp: exp addop term
   32    | term

   33 addop: ADD
   34      | SUBTRACT

   35 term: term mulop factor
   36     | factor

   37 mulop: MULTIPLY
   38      | DIVISION

   39 factor: LEFT_PREN exp RIGHT_PREN
   40       | DIGIT


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGIT (258) 20 40
INT (259) 8 11 12
INDEX (260)
NOTEQUAL (261) 28
STRING (262) 13
EQUAL (263) 9 10 11 12 13
TRUE (264) 17
FALSE (265) 18
MULTIPLY (266) 37
ADD (267) 33
SUBTRACT (268) 34
DIVISION (269) 38
LESSEROREQUAL (270) 23
EQUIVALENT (271) 27
GREATEROREQUAL (272) 24
LESSTHAN (273) 25
GREATERTHAN (274) 26
WHILE (275) 7
DO (276) 7
IF (277) 5 6
ELSE (278) 6
FUNCTION (279) 3 4
LEFT_PREN (280) 3 4 39
RIGHT_PREN (281) 3 4 39
LEFT_BRACKET (282)
RIGHT_BRACKET (283)
LEFT_CURR_BRACKET (284)
RIGHT_CURR_BRACKET (285)
RETURN (286) 3 14 15 16 17 18
END (287) 3 4 5 6 7
COMMA (288) 29
READ (289)
WRITE (290)
STRINGLITERAL (291) 10 13 21
INVALIDVAR (292)
VARIABLE (293) 3 4 8 9 10 11 12 13 14 19 20 29 30


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
start (40)
    on left: 1 2, on right: 0
function (41)
    on left: 3 4, on right: 2
statements (42)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18, on right: 3 4 5
    6 7
conditional (43)
    on left: 19 20 21 22, on right: 5 6 7 15
condition (44)
    on left: 23 24 25 26 27 28, on right: 19 20 21 22
args (45)
    on left: 29 30, on right: 3 4 29
exp (46)
    on left: 31 32, on right: 9 11 16 22 31 39
addop (47)
    on left: 33 34, on right: 31
term (48)
    on left: 35 36, on right: 31 32 35
mulop (49)
    on left: 37 38, on right: 35
factor (50)
    on left: 39 40, on right: 35 36


State 0

    0 $accept: . start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (start)

    start     go to state 2
    function  go to state 3


State 1

    3 function: FUNCTION . VARIABLE LEFT_PREN args RIGHT_PREN statements RETURN END
    4         | FUNCTION . VARIABLE LEFT_PREN args RIGHT_PREN statements END

    VARIABLE  shift, and go to state 4


State 2

    0 $accept: start . $end

    $end  shift, and go to state 5


State 3

    2 start: function .

    $default  reduce using rule 2 (start)


State 4

    3 function: FUNCTION VARIABLE . LEFT_PREN args RIGHT_PREN statements RETURN END
    4         | FUNCTION VARIABLE . LEFT_PREN args RIGHT_PREN statements END

    LEFT_PREN  shift, and go to state 6


State 5

    0 $accept: start $end .

    $default  accept


State 6

    3 function: FUNCTION VARIABLE LEFT_PREN . args RIGHT_PREN statements RETURN END
    4         | FUNCTION VARIABLE LEFT_PREN . args RIGHT_PREN statements END

    VARIABLE  shift, and go to state 7

    args  go to state 8


State 7

   30 args: VARIABLE .

    $default  reduce using rule 30 (args)


State 8

    3 function: FUNCTION VARIABLE LEFT_PREN args . RIGHT_PREN statements RETURN END
    4         | FUNCTION VARIABLE LEFT_PREN args . RIGHT_PREN statements END
   29 args: args . COMMA VARIABLE

    RIGHT_PREN  shift, and go to state 9
    COMMA       shift, and go to state 10


State 9

    3 function: FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN . statements RETURN END
    4         | FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN . statements END

    INT       shift, and go to state 11
    STRING    shift, and go to state 12
    WHILE     shift, and go to state 13
    IF        shift, and go to state 14
    RETURN    shift, and go to state 15
    VARIABLE  shift, and go to state 16

    statements  go to state 17


State 10

   29 args: args COMMA . VARIABLE

    VARIABLE  shift, and go to state 18


State 11

    8 statements: INT . VARIABLE
   11           | INT . VARIABLE EQUAL exp
   12           | INT . VARIABLE EQUAL VARIABLE

    VARIABLE  shift, and go to state 19


State 12

   13 statements: STRING . VARIABLE EQUAL STRINGLITERAL

    VARIABLE  shift, and go to state 20


State 13

    7 statements: WHILE . conditional DO statements END

    DIGIT          shift, and go to state 21
    LEFT_PREN      shift, and go to state 22
    STRINGLITERAL  shift, and go to state 23
    VARIABLE       shift, and go to state 24

    conditional  go to state 25
    exp          go to state 26
    term         go to state 27
    factor       go to state 28


State 14

    5 statements: IF . conditional statements END
    6           | IF . conditional statements ELSE statements END

    DIGIT          shift, and go to state 21
    LEFT_PREN      shift, and go to state 22
    STRINGLITERAL  shift, and go to state 23
    VARIABLE       shift, and go to state 24

    conditional  go to state 29
    exp          go to state 26
    term         go to state 27
    factor       go to state 28


State 15

   14 statements: RETURN . VARIABLE
   15           | RETURN . conditional
   16           | RETURN . exp
   17           | RETURN . TRUE
   18           | RETURN . FALSE

    DIGIT          shift, and go to state 21
    TRUE           shift, and go to state 30
    FALSE          shift, and go to state 31
    LEFT_PREN      shift, and go to state 22
    STRINGLITERAL  shift, and go to state 23
    VARIABLE       shift, and go to state 32

    conditional  go to state 33
    exp          go to state 34
    term         go to state 27
    factor       go to state 28


State 16

    9 statements: VARIABLE . EQUAL exp
   10           | VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 35


State 17

    3 function: FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements . RETURN END
    4         | FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements . END

    RETURN  shift, and go to state 36
    END     shift, and go to state 37


State 18

   29 args: args COMMA VARIABLE .

    $default  reduce using rule 29 (args)


State 19

    8 statements: INT VARIABLE .
   11           | INT VARIABLE . EQUAL exp
   12           | INT VARIABLE . EQUAL VARIABLE

    EQUAL  shift, and go to state 38

    $default  reduce using rule 8 (statements)


State 20

   13 statements: STRING VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 39


State 21

   40 factor: DIGIT .

    $default  reduce using rule 40 (factor)


State 22

   39 factor: LEFT_PREN . exp RIGHT_PREN

    DIGIT      shift, and go to state 21
    LEFT_PREN  shift, and go to state 22

    exp     go to state 40
    term    go to state 27
    factor  go to state 28


State 23

   21 conditional: STRINGLITERAL . condition STRINGLITERAL

    NOTEQUAL        shift, and go to state 41
    LESSEROREQUAL   shift, and go to state 42
    EQUIVALENT      shift, and go to state 43
    GREATEROREQUAL  shift, and go to state 44
    LESSTHAN        shift, and go to state 45
    GREATERTHAN     shift, and go to state 46

    condition  go to state 47


State 24

   19 conditional: VARIABLE . condition VARIABLE
   20            | VARIABLE . condition DIGIT

    NOTEQUAL        shift, and go to state 41
    LESSEROREQUAL   shift, and go to state 42
    EQUIVALENT      shift, and go to state 43
    GREATEROREQUAL  shift, and go to state 44
    LESSTHAN        shift, and go to state 45
    GREATERTHAN     shift, and go to state 46

    condition  go to state 48


State 25

    7 statements: WHILE conditional . DO statements END

    DO  shift, and go to state 49


State 26

   22 conditional: exp . condition exp
   31 exp: exp . addop term

    NOTEQUAL        shift, and go to state 41
    ADD             shift, and go to state 50
    SUBTRACT        shift, and go to state 51
    LESSEROREQUAL   shift, and go to state 42
    EQUIVALENT      shift, and go to state 43
    GREATEROREQUAL  shift, and go to state 44
    LESSTHAN        shift, and go to state 45
    GREATERTHAN     shift, and go to state 46

    condition  go to state 52
    addop      go to state 53


State 27

   32 exp: term .
   35 term: term . mulop factor

    MULTIPLY  shift, and go to state 54
    DIVISION  shift, and go to state 55

    $default  reduce using rule 32 (exp)

    mulop  go to state 56


State 28

   36 term: factor .

    $default  reduce using rule 36 (term)


State 29

    5 statements: IF conditional . statements END
    6           | IF conditional . statements ELSE statements END

    INT       shift, and go to state 11
    STRING    shift, and go to state 12
    WHILE     shift, and go to state 13
    IF        shift, and go to state 14
    RETURN    shift, and go to state 15
    VARIABLE  shift, and go to state 16

    statements  go to state 57


State 30

   17 statements: RETURN TRUE .

    $default  reduce using rule 17 (statements)


State 31

   18 statements: RETURN FALSE .

    $default  reduce using rule 18 (statements)


State 32

   14 statements: RETURN VARIABLE .
   19 conditional: VARIABLE . condition VARIABLE
   20            | VARIABLE . condition DIGIT

    NOTEQUAL        shift, and go to state 41
    LESSEROREQUAL   shift, and go to state 42
    EQUIVALENT      shift, and go to state 43
    GREATEROREQUAL  shift, and go to state 44
    LESSTHAN        shift, and go to state 45
    GREATERTHAN     shift, and go to state 46

    $default  reduce using rule 14 (statements)

    condition  go to state 48


State 33

   15 statements: RETURN conditional .

    $default  reduce using rule 15 (statements)


State 34

   16 statements: RETURN exp .
   22 conditional: exp . condition exp
   31 exp: exp . addop term

    NOTEQUAL        shift, and go to state 41
    ADD             shift, and go to state 50
    SUBTRACT        shift, and go to state 51
    LESSEROREQUAL   shift, and go to state 42
    EQUIVALENT      shift, and go to state 43
    GREATEROREQUAL  shift, and go to state 44
    LESSTHAN        shift, and go to state 45
    GREATERTHAN     shift, and go to state 46

    $default  reduce using rule 16 (statements)

    condition  go to state 52
    addop      go to state 53


State 35

    9 statements: VARIABLE EQUAL . exp
   10           | VARIABLE EQUAL . STRINGLITERAL

    DIGIT          shift, and go to state 21
    LEFT_PREN      shift, and go to state 22
    STRINGLITERAL  shift, and go to state 58

    exp     go to state 59
    term    go to state 27
    factor  go to state 28


State 36

    3 function: FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements RETURN . END

    END  shift, and go to state 60


State 37

    4 function: FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements END .

    $default  reduce using rule 4 (function)


State 38

   11 statements: INT VARIABLE EQUAL . exp
   12           | INT VARIABLE EQUAL . VARIABLE

    DIGIT      shift, and go to state 21
    LEFT_PREN  shift, and go to state 22
    VARIABLE   shift, and go to state 61

    exp     go to state 62
    term    go to state 27
    factor  go to state 28


State 39

   13 statements: STRING VARIABLE EQUAL . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 63


State 40

   31 exp: exp . addop term
   39 factor: LEFT_PREN exp . RIGHT_PREN

    ADD         shift, and go to state 50
    SUBTRACT    shift, and go to state 51
    RIGHT_PREN  shift, and go to state 64

    addop  go to state 53


State 41

   28 condition: NOTEQUAL .

    $default  reduce using rule 28 (condition)


State 42

   23 condition: LESSEROREQUAL .

    $default  reduce using rule 23 (condition)


State 43

   27 condition: EQUIVALENT .

    $default  reduce using rule 27 (condition)


State 44

   24 condition: GREATEROREQUAL .

    $default  reduce using rule 24 (condition)


State 45

   25 condition: LESSTHAN .

    $default  reduce using rule 25 (condition)


State 46

   26 condition: GREATERTHAN .

    $default  reduce using rule 26 (condition)


State 47

   21 conditional: STRINGLITERAL condition . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 65


State 48

   19 conditional: VARIABLE condition . VARIABLE
   20            | VARIABLE condition . DIGIT

    DIGIT     shift, and go to state 66
    VARIABLE  shift, and go to state 67


State 49

    7 statements: WHILE conditional DO . statements END

    INT       shift, and go to state 11
    STRING    shift, and go to state 12
    WHILE     shift, and go to state 13
    IF        shift, and go to state 14
    RETURN    shift, and go to state 15
    VARIABLE  shift, and go to state 16

    statements  go to state 68


State 50

   33 addop: ADD .

    $default  reduce using rule 33 (addop)


State 51

   34 addop: SUBTRACT .

    $default  reduce using rule 34 (addop)


State 52

   22 conditional: exp condition . exp

    DIGIT      shift, and go to state 21
    LEFT_PREN  shift, and go to state 22

    exp     go to state 69
    term    go to state 27
    factor  go to state 28


State 53

   31 exp: exp addop . term

    DIGIT      shift, and go to state 21
    LEFT_PREN  shift, and go to state 22

    term    go to state 70
    factor  go to state 28


State 54

   37 mulop: MULTIPLY .

    $default  reduce using rule 37 (mulop)


State 55

   38 mulop: DIVISION .

    $default  reduce using rule 38 (mulop)


State 56

   35 term: term mulop . factor

    DIGIT      shift, and go to state 21
    LEFT_PREN  shift, and go to state 22

    factor  go to state 71


State 57

    5 statements: IF conditional statements . END
    6           | IF conditional statements . ELSE statements END

    ELSE  shift, and go to state 72
    END   shift, and go to state 73


State 58

   10 statements: VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 10 (statements)


State 59

    9 statements: VARIABLE EQUAL exp .
   31 exp: exp . addop term

    ADD       shift, and go to state 50
    SUBTRACT  shift, and go to state 51

    $default  reduce using rule 9 (statements)

    addop  go to state 53


State 60

    3 function: FUNCTION VARIABLE LEFT_PREN args RIGHT_PREN statements RETURN END .

    $default  reduce using rule 3 (function)


State 61

   12 statements: INT VARIABLE EQUAL VARIABLE .

    $default  reduce using rule 12 (statements)


State 62

   11 statements: INT VARIABLE EQUAL exp .
   31 exp: exp . addop term

    ADD       shift, and go to state 50
    SUBTRACT  shift, and go to state 51

    $default  reduce using rule 11 (statements)

    addop  go to state 53


State 63

   13 statements: STRING VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 13 (statements)


State 64

   39 factor: LEFT_PREN exp RIGHT_PREN .

    $default  reduce using rule 39 (factor)


State 65

   21 conditional: STRINGLITERAL condition STRINGLITERAL .

    $default  reduce using rule 21 (conditional)


State 66

   20 conditional: VARIABLE condition DIGIT .

    $default  reduce using rule 20 (conditional)


State 67

   19 conditional: VARIABLE condition VARIABLE .

    $default  reduce using rule 19 (conditional)


State 68

    7 statements: WHILE conditional DO statements . END

    END  shift, and go to state 74


State 69

   22 conditional: exp condition exp .
   31 exp: exp . addop term

    ADD       shift, and go to state 50
    SUBTRACT  shift, and go to state 51

    $default  reduce using rule 22 (conditional)

    addop  go to state 53


State 70

   31 exp: exp addop term .
   35 term: term . mulop factor

    MULTIPLY  shift, and go to state 54
    DIVISION  shift, and go to state 55

    $default  reduce using rule 31 (exp)

    mulop  go to state 56


State 71

   35 term: term mulop factor .

    $default  reduce using rule 35 (term)


State 72

    6 statements: IF conditional statements ELSE . statements END

    INT       shift, and go to state 11
    STRING    shift, and go to state 12
    WHILE     shift, and go to state 13
    IF        shift, and go to state 14
    RETURN    shift, and go to state 15
    VARIABLE  shift, and go to state 16

    statements  go to state 75


State 73

    5 statements: IF conditional statements END .

    $default  reduce using rule 5 (statements)


State 74

    7 statements: WHILE conditional DO statements END .

    $default  reduce using rule 7 (statements)


State 75

    6 statements: IF conditional statements ELSE statements . END

    END  shift, and go to state 76


State 76

    6 statements: IF conditional statements ELSE statements END .

    $default  reduce using rule 6 (statements)
