Terminals unused in grammar

   INDEX
   THEN
   DO
   LEFT_BRACKET
   RIGHT_BRACKET
   LEFT_CURR_BRACKET
   RIGHT_CURR_BRACKET
   READ
   INVALIDVAR


State 76 conflicts: 9 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | function void

    3 void: %empty
    4     | function void

    5 function: FUNCTION functiondec statements END

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN

    8 elses: %empty
    9      | ELSE statements

   10 statements: %empty
   11           | rule s2

   12 s2: %empty
   13   | rule s2

   14 rule: IF conditional statements elses END
   15     | WHILE conditional statements END
   16     | statement

   17 statement: INT VARIABLE
   18          | VARIABLE EQUAL DIGIT
   19          | VARIABLE EQUAL exp
   20          | VARIABLE EQUAL STRINGLITERAL
   21          | INT VARIABLE EQUAL exp
   22          | WRITE DIGIT
   23          | WRITE VARIABLE
   24          | WRITE STRINGLITERAL
   25          | STRING VARIABLE EQUAL STRINGLITERAL
   26          | RETURN retval
   27          | functioncall
   28          | functioncall addop functioncall
   29          | functioncall mulop functioncall
   30          | VARIABLE EQUAL functioncall
   31          | INT VARIABLE EQUAL functioncall

   32 conditional: exp condition exp
   33            | exp condition boolean
   34            | STRINGLITERAL condition STRINGLITERAL

   35 boolean: TRUE
   36        | FALSE

   37 condition: LESSEROREQUAL
   38          | GREATEROREQUAL
   39          | LESSTHAN
   40          | GREATERTHAN
   41          | EQUIVALENT
   42          | NOTEQUIVALENT

   43 retval: statement
   44       | exp
   45       | conditional
   46       | boolean

   47 type: %empty
   48     | INT
   49     | STRING

   50 input: exp

   51 inputargs: %empty
   52          | input inputargs2

   53 inputargs2: %empty
   54           | COMMA input inputargs2

   55 declarationargs: %empty
   56                | type VARIABLE declarationargs2

   57 declarationargs2: %empty
   58                 | COMMA type VARIABLE declarationargs2

   59 exp: exp addop term
   60    | term

   61 addop: ADD
   62      | SUBTRACT

   63 term: term mulop factor
   64     | factor

   65 mulop: MULTIPLY
   66      | DIVISION

   67 factor: LEFT_PREN exp RIGHT_PREN
   68       | DIGIT
   69       | VARIABLE


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGIT (258) 18 22 68
INT (259) 17 21 31 48
INDEX (260)
THEN (261)
STRING (262) 25 49
EQUAL (263) 18 19 20 21 25 30 31
NOTEQUIVALENT (264) 42
TRUE (265) 35
FALSE (266) 36
MULTIPLY (267) 65
ADD (268) 61
SUBTRACT (269) 62
DIVISION (270) 66
LESSEROREQUAL (271) 37
EQUIVALENT (272) 41
GREATEROREQUAL (273) 38
LESSTHAN (274) 39
GREATERTHAN (275) 40
WHILE (276) 15
DO (277)
IF (278) 14
ELSE (279) 9
FUNCTION (280) 5
LEFT_PREN (281) 6 7 67
RIGHT_PREN (282) 6 7 67
LEFT_BRACKET (283)
RIGHT_BRACKET (284)
LEFT_CURR_BRACKET (285)
RIGHT_CURR_BRACKET (286)
RETURN (287) 26
END (288) 5 14 15
COMMA (289) 54 58
READ (290)
WRITE (291) 22 23 24
STRINGLITERAL (292) 20 24 25 34
INVALIDVAR (293)
VARIABLE (294) 6 7 17 18 19 20 21 23 25 30 31 56 58 69


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
start (41)
    on left: 1 2, on right: 0
void (42)
    on left: 3 4, on right: 2 4
function (43)
    on left: 5, on right: 2 4
functiondec (44)
    on left: 6, on right: 5
functioncall (45)
    on left: 7, on right: 27 28 29 30 31
elses (46)
    on left: 8 9, on right: 14
statements (47)
    on left: 10 11, on right: 5 9 14 15
s2 (48)
    on left: 12 13, on right: 11 13
rule (49)
    on left: 14 15 16, on right: 11 13
statement (50)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31, on right:
    16 43
conditional (51)
    on left: 32 33 34, on right: 14 15 45
boolean (52)
    on left: 35 36, on right: 33 46
condition (53)
    on left: 37 38 39 40 41 42, on right: 32 33 34
retval (54)
    on left: 43 44 45 46, on right: 26
type (55)
    on left: 47 48 49, on right: 56 58
input (56)
    on left: 50, on right: 52 54
inputargs (57)
    on left: 51 52, on right: 7
inputargs2 (58)
    on left: 53 54, on right: 52 54
declarationargs (59)
    on left: 55 56, on right: 6
declarationargs2 (60)
    on left: 57 58, on right: 56 58
exp (61)
    on left: 59 60, on right: 19 21 32 33 44 50 59 67
addop (62)
    on left: 61 62, on right: 28 59
term (63)
    on left: 63 64, on right: 59 60 63
mulop (64)
    on left: 65 66, on right: 29 63
factor (65)
    on left: 67 68 69, on right: 63 64


State 0

    0 $accept: . start $end

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 1 (start)

    start     go to state 2
    function  go to state 3


State 1

    5 function: FUNCTION . functiondec statements END

    VARIABLE  shift, and go to state 4

    functiondec  go to state 5


State 2

    0 $accept: start . $end

    $end  shift, and go to state 6


State 3

    2 start: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 7
    function  go to state 8


State 4

    6 functiondec: VARIABLE . LEFT_PREN declarationargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 9


State 5

    5 function: FUNCTION functiondec . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 18
    rule          go to state 19
    statement     go to state 20


State 6

    0 $accept: start $end .

    $default  accept


State 7

    2 start: function void .

    $default  reduce using rule 2 (start)


State 8

    4 void: function . void

    FUNCTION  shift, and go to state 1

    $default  reduce using rule 3 (void)

    void      go to state 21
    function  go to state 8


State 9

    6 functiondec: VARIABLE LEFT_PREN . declarationargs RIGHT_PREN

    INT     shift, and go to state 22
    STRING  shift, and go to state 23

    RIGHT_PREN  reduce using rule 55 (declarationargs)
    $default    reduce using rule 47 (type)

    type             go to state 24
    declarationargs  go to state 25


State 10

   17 statement: INT . VARIABLE
   21          | INT . VARIABLE EQUAL exp
   31          | INT . VARIABLE EQUAL functioncall

    VARIABLE  shift, and go to state 26


State 11

   25 statement: STRING . VARIABLE EQUAL STRINGLITERAL

    VARIABLE  shift, and go to state 27


State 12

   15 rule: WHILE . conditional statements END

    DIGIT          shift, and go to state 28
    LEFT_PREN      shift, and go to state 29
    STRINGLITERAL  shift, and go to state 30
    VARIABLE       shift, and go to state 31

    conditional  go to state 32
    exp          go to state 33
    term         go to state 34
    factor       go to state 35


State 13

   14 rule: IF . conditional statements elses END

    DIGIT          shift, and go to state 28
    LEFT_PREN      shift, and go to state 29
    STRINGLITERAL  shift, and go to state 30
    VARIABLE       shift, and go to state 31

    conditional  go to state 36
    exp          go to state 33
    term         go to state 34
    factor       go to state 35


State 14

   26 statement: RETURN . retval

    DIGIT          shift, and go to state 28
    INT            shift, and go to state 10
    STRING         shift, and go to state 11
    TRUE           shift, and go to state 37
    FALSE          shift, and go to state 38
    LEFT_PREN      shift, and go to state 29
    RETURN         shift, and go to state 14
    WRITE          shift, and go to state 15
    STRINGLITERAL  shift, and go to state 30
    VARIABLE       shift, and go to state 39

    functioncall  go to state 17
    statement     go to state 40
    conditional   go to state 41
    boolean       go to state 42
    retval        go to state 43
    exp           go to state 44
    term          go to state 34
    factor        go to state 35


State 15

   22 statement: WRITE . DIGIT
   23          | WRITE . VARIABLE
   24          | WRITE . STRINGLITERAL

    DIGIT          shift, and go to state 45
    STRINGLITERAL  shift, and go to state 46
    VARIABLE       shift, and go to state 47


State 16

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL DIGIT
   19          | VARIABLE . EQUAL exp
   20          | VARIABLE . EQUAL STRINGLITERAL
   30          | VARIABLE . EQUAL functioncall

    EQUAL      shift, and go to state 48
    LEFT_PREN  shift, and go to state 49


State 17

   27 statement: functioncall .
   28          | functioncall . addop functioncall
   29          | functioncall . mulop functioncall

    MULTIPLY  shift, and go to state 50
    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52
    DIVISION  shift, and go to state 53

    $default  reduce using rule 27 (statement)

    addop  go to state 54
    mulop  go to state 55


State 18

    5 function: FUNCTION functiondec statements . END

    END  shift, and go to state 56


State 19

   11 statements: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 12 (s2)

    functioncall  go to state 17
    s2            go to state 57
    rule          go to state 58
    statement     go to state 20


State 20

   16 rule: statement .

    $default  reduce using rule 16 (rule)


State 21

    4 void: function void .

    $default  reduce using rule 4 (void)


State 22

   48 type: INT .

    $default  reduce using rule 48 (type)


State 23

   49 type: STRING .

    $default  reduce using rule 49 (type)


State 24

   56 declarationargs: type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 59


State 25

    6 functiondec: VARIABLE LEFT_PREN declarationargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 60


State 26

   17 statement: INT VARIABLE .
   21          | INT VARIABLE . EQUAL exp
   31          | INT VARIABLE . EQUAL functioncall

    EQUAL  shift, and go to state 61

    $default  reduce using rule 17 (statement)


State 27

   25 statement: STRING VARIABLE . EQUAL STRINGLITERAL

    EQUAL  shift, and go to state 62


State 28

   68 factor: DIGIT .

    $default  reduce using rule 68 (factor)


State 29

   67 factor: LEFT_PREN . exp RIGHT_PREN

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 31

    exp     go to state 63
    term    go to state 34
    factor  go to state 35


State 30

   34 conditional: STRINGLITERAL . condition STRINGLITERAL

    NOTEQUIVALENT   shift, and go to state 64
    LESSEROREQUAL   shift, and go to state 65
    EQUIVALENT      shift, and go to state 66
    GREATEROREQUAL  shift, and go to state 67
    LESSTHAN        shift, and go to state 68
    GREATERTHAN     shift, and go to state 69

    condition  go to state 70


State 31

   69 factor: VARIABLE .

    $default  reduce using rule 69 (factor)


State 32

   15 rule: WHILE conditional . statements END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 71
    rule          go to state 19
    statement     go to state 20


State 33

   32 conditional: exp . condition exp
   33            | exp . condition boolean
   59 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 64
    ADD             shift, and go to state 51
    SUBTRACT        shift, and go to state 52
    LESSEROREQUAL   shift, and go to state 65
    EQUIVALENT      shift, and go to state 66
    GREATEROREQUAL  shift, and go to state 67
    LESSTHAN        shift, and go to state 68
    GREATERTHAN     shift, and go to state 69

    condition  go to state 72
    addop      go to state 73


State 34

   60 exp: term .
   63 term: term . mulop factor

    MULTIPLY  shift, and go to state 50
    DIVISION  shift, and go to state 53

    $default  reduce using rule 60 (exp)

    mulop  go to state 74


State 35

   64 term: factor .

    $default  reduce using rule 64 (term)


State 36

   14 rule: IF conditional . statements elses END

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 75
    rule          go to state 19
    statement     go to state 20


State 37

   35 boolean: TRUE .

    $default  reduce using rule 35 (boolean)


State 38

   36 boolean: FALSE .

    $default  reduce using rule 36 (boolean)


State 39

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   18 statement: VARIABLE . EQUAL DIGIT
   19          | VARIABLE . EQUAL exp
   20          | VARIABLE . EQUAL STRINGLITERAL
   30          | VARIABLE . EQUAL functioncall
   69 factor: VARIABLE .

    EQUAL      shift, and go to state 48
    LEFT_PREN  shift, and go to state 49

    $default  reduce using rule 69 (factor)


State 40

   43 retval: statement .

    $default  reduce using rule 43 (retval)


State 41

   45 retval: conditional .

    $default  reduce using rule 45 (retval)


State 42

   46 retval: boolean .

    $default  reduce using rule 46 (retval)


State 43

   26 statement: RETURN retval .

    $default  reduce using rule 26 (statement)


State 44

   32 conditional: exp . condition exp
   33            | exp . condition boolean
   44 retval: exp .
   59 exp: exp . addop term

    NOTEQUIVALENT   shift, and go to state 64
    ADD             shift, and go to state 51
    SUBTRACT        shift, and go to state 52
    LESSEROREQUAL   shift, and go to state 65
    EQUIVALENT      shift, and go to state 66
    GREATEROREQUAL  shift, and go to state 67
    LESSTHAN        shift, and go to state 68
    GREATERTHAN     shift, and go to state 69

    $default  reduce using rule 44 (retval)

    condition  go to state 72
    addop      go to state 73


State 45

   22 statement: WRITE DIGIT .

    $default  reduce using rule 22 (statement)


State 46

   24 statement: WRITE STRINGLITERAL .

    $default  reduce using rule 24 (statement)


State 47

   23 statement: WRITE VARIABLE .

    $default  reduce using rule 23 (statement)


State 48

   18 statement: VARIABLE EQUAL . DIGIT
   19          | VARIABLE EQUAL . exp
   20          | VARIABLE EQUAL . STRINGLITERAL
   30          | VARIABLE EQUAL . functioncall

    DIGIT          shift, and go to state 76
    LEFT_PREN      shift, and go to state 29
    STRINGLITERAL  shift, and go to state 77
    VARIABLE       shift, and go to state 78

    functioncall  go to state 79
    exp           go to state 80
    term          go to state 34
    factor        go to state 35


State 49

    7 functioncall: VARIABLE LEFT_PREN . inputargs RIGHT_PREN

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 31

    $default  reduce using rule 51 (inputargs)

    input      go to state 81
    inputargs  go to state 82
    exp        go to state 83
    term       go to state 34
    factor     go to state 35


State 50

   65 mulop: MULTIPLY .

    $default  reduce using rule 65 (mulop)


State 51

   61 addop: ADD .

    $default  reduce using rule 61 (addop)


State 52

   62 addop: SUBTRACT .

    $default  reduce using rule 62 (addop)


State 53

   66 mulop: DIVISION .

    $default  reduce using rule 66 (mulop)


State 54

   28 statement: functioncall addop . functioncall

    VARIABLE  shift, and go to state 84

    functioncall  go to state 85


State 55

   29 statement: functioncall mulop . functioncall

    VARIABLE  shift, and go to state 84

    functioncall  go to state 86


State 56

    5 function: FUNCTION functiondec statements END .

    $default  reduce using rule 5 (function)


State 57

   11 statements: rule s2 .

    $default  reduce using rule 11 (statements)


State 58

   13 s2: rule . s2

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 12 (s2)

    functioncall  go to state 17
    s2            go to state 87
    rule          go to state 58
    statement     go to state 20


State 59

   56 declarationargs: type VARIABLE . declarationargs2

    COMMA  shift, and go to state 88

    $default  reduce using rule 57 (declarationargs2)

    declarationargs2  go to state 89


State 60

    6 functiondec: VARIABLE LEFT_PREN declarationargs RIGHT_PREN .

    $default  reduce using rule 6 (functiondec)


State 61

   21 statement: INT VARIABLE EQUAL . exp
   31          | INT VARIABLE EQUAL . functioncall

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 78

    functioncall  go to state 90
    exp           go to state 91
    term          go to state 34
    factor        go to state 35


State 62

   25 statement: STRING VARIABLE EQUAL . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 92


State 63

   59 exp: exp . addop term
   67 factor: LEFT_PREN exp . RIGHT_PREN

    ADD         shift, and go to state 51
    SUBTRACT    shift, and go to state 52
    RIGHT_PREN  shift, and go to state 93

    addop  go to state 73


State 64

   42 condition: NOTEQUIVALENT .

    $default  reduce using rule 42 (condition)


State 65

   37 condition: LESSEROREQUAL .

    $default  reduce using rule 37 (condition)


State 66

   41 condition: EQUIVALENT .

    $default  reduce using rule 41 (condition)


State 67

   38 condition: GREATEROREQUAL .

    $default  reduce using rule 38 (condition)


State 68

   39 condition: LESSTHAN .

    $default  reduce using rule 39 (condition)


State 69

   40 condition: GREATERTHAN .

    $default  reduce using rule 40 (condition)


State 70

   34 conditional: STRINGLITERAL condition . STRINGLITERAL

    STRINGLITERAL  shift, and go to state 94


State 71

   15 rule: WHILE conditional statements . END

    END  shift, and go to state 95


State 72

   32 conditional: exp condition . exp
   33            | exp condition . boolean

    DIGIT      shift, and go to state 28
    TRUE       shift, and go to state 37
    FALSE      shift, and go to state 38
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 31

    boolean  go to state 96
    exp      go to state 97
    term     go to state 34
    factor   go to state 35


State 73

   59 exp: exp addop . term

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 31

    term    go to state 98
    factor  go to state 35


State 74

   63 term: term mulop . factor

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 31

    factor  go to state 99


State 75

   14 rule: IF conditional statements . elses END

    ELSE  shift, and go to state 100

    $default  reduce using rule 8 (elses)

    elses  go to state 101


State 76

   18 statement: VARIABLE EQUAL DIGIT .
   68 factor: DIGIT .

    INT       reduce using rule 18 (statement)
    INT       [reduce using rule 68 (factor)]
    STRING    reduce using rule 18 (statement)
    STRING    [reduce using rule 68 (factor)]
    MULTIPLY  reduce using rule 68 (factor)
    ADD       reduce using rule 68 (factor)
    SUBTRACT  reduce using rule 68 (factor)
    DIVISION  reduce using rule 68 (factor)
    WHILE     reduce using rule 18 (statement)
    WHILE     [reduce using rule 68 (factor)]
    IF        reduce using rule 18 (statement)
    IF        [reduce using rule 68 (factor)]
    ELSE      reduce using rule 18 (statement)
    ELSE      [reduce using rule 68 (factor)]
    RETURN    reduce using rule 18 (statement)
    RETURN    [reduce using rule 68 (factor)]
    END       reduce using rule 18 (statement)
    END       [reduce using rule 68 (factor)]
    WRITE     reduce using rule 18 (statement)
    WRITE     [reduce using rule 68 (factor)]
    VARIABLE  reduce using rule 18 (statement)
    VARIABLE  [reduce using rule 68 (factor)]
    $default  reduce using rule 18 (statement)


State 77

   20 statement: VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 20 (statement)


State 78

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN
   69 factor: VARIABLE .

    LEFT_PREN  shift, and go to state 49

    $default  reduce using rule 69 (factor)


State 79

   30 statement: VARIABLE EQUAL functioncall .

    $default  reduce using rule 30 (statement)


State 80

   19 statement: VARIABLE EQUAL exp .
   59 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 19 (statement)

    addop  go to state 73


State 81

   52 inputargs: input . inputargs2

    COMMA  shift, and go to state 102

    $default  reduce using rule 53 (inputargs2)

    inputargs2  go to state 103


State 82

    7 functioncall: VARIABLE LEFT_PREN inputargs . RIGHT_PREN

    RIGHT_PREN  shift, and go to state 104


State 83

   50 input: exp .
   59 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 50 (input)

    addop  go to state 73


State 84

    7 functioncall: VARIABLE . LEFT_PREN inputargs RIGHT_PREN

    LEFT_PREN  shift, and go to state 49


State 85

   28 statement: functioncall addop functioncall .

    $default  reduce using rule 28 (statement)


State 86

   29 statement: functioncall mulop functioncall .

    $default  reduce using rule 29 (statement)


State 87

   13 s2: rule s2 .

    $default  reduce using rule 13 (s2)


State 88

   58 declarationargs2: COMMA . type VARIABLE declarationargs2

    INT     shift, and go to state 22
    STRING  shift, and go to state 23

    $default  reduce using rule 47 (type)

    type  go to state 105


State 89

   56 declarationargs: type VARIABLE declarationargs2 .

    $default  reduce using rule 56 (declarationargs)


State 90

   31 statement: INT VARIABLE EQUAL functioncall .

    $default  reduce using rule 31 (statement)


State 91

   21 statement: INT VARIABLE EQUAL exp .
   59 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 21 (statement)

    addop  go to state 73


State 92

   25 statement: STRING VARIABLE EQUAL STRINGLITERAL .

    $default  reduce using rule 25 (statement)


State 93

   67 factor: LEFT_PREN exp RIGHT_PREN .

    $default  reduce using rule 67 (factor)


State 94

   34 conditional: STRINGLITERAL condition STRINGLITERAL .

    $default  reduce using rule 34 (conditional)


State 95

   15 rule: WHILE conditional statements END .

    $default  reduce using rule 15 (rule)


State 96

   33 conditional: exp condition boolean .

    $default  reduce using rule 33 (conditional)


State 97

   32 conditional: exp condition exp .
   59 exp: exp . addop term

    ADD       shift, and go to state 51
    SUBTRACT  shift, and go to state 52

    $default  reduce using rule 32 (conditional)

    addop  go to state 73


State 98

   59 exp: exp addop term .
   63 term: term . mulop factor

    MULTIPLY  shift, and go to state 50
    DIVISION  shift, and go to state 53

    $default  reduce using rule 59 (exp)

    mulop  go to state 74


State 99

   63 term: term mulop factor .

    $default  reduce using rule 63 (term)


State 100

    9 elses: ELSE . statements

    INT       shift, and go to state 10
    STRING    shift, and go to state 11
    WHILE     shift, and go to state 12
    IF        shift, and go to state 13
    RETURN    shift, and go to state 14
    WRITE     shift, and go to state 15
    VARIABLE  shift, and go to state 16

    $default  reduce using rule 10 (statements)

    functioncall  go to state 17
    statements    go to state 106
    rule          go to state 19
    statement     go to state 20


State 101

   14 rule: IF conditional statements elses . END

    END  shift, and go to state 107


State 102

   54 inputargs2: COMMA . input inputargs2

    DIGIT      shift, and go to state 28
    LEFT_PREN  shift, and go to state 29
    VARIABLE   shift, and go to state 31

    input   go to state 108
    exp     go to state 83
    term    go to state 34
    factor  go to state 35


State 103

   52 inputargs: input inputargs2 .

    $default  reduce using rule 52 (inputargs)


State 104

    7 functioncall: VARIABLE LEFT_PREN inputargs RIGHT_PREN .

    $default  reduce using rule 7 (functioncall)


State 105

   58 declarationargs2: COMMA type . VARIABLE declarationargs2

    VARIABLE  shift, and go to state 109


State 106

    9 elses: ELSE statements .

    $default  reduce using rule 9 (elses)


State 107

   14 rule: IF conditional statements elses END .

    $default  reduce using rule 14 (rule)


State 108

   54 inputargs2: COMMA input . inputargs2

    COMMA  shift, and go to state 102

    $default  reduce using rule 53 (inputargs2)

    inputargs2  go to state 110


State 109

   58 declarationargs2: COMMA type VARIABLE . declarationargs2

    COMMA  shift, and go to state 88

    $default  reduce using rule 57 (declarationargs2)

    declarationargs2  go to state 111


State 110

   54 inputargs2: COMMA input inputargs2 .

    $default  reduce using rule 54 (inputargs2)


State 111

   58 declarationargs2: COMMA type VARIABLE declarationargs2 .

    $default  reduce using rule 58 (declarationargs2)
